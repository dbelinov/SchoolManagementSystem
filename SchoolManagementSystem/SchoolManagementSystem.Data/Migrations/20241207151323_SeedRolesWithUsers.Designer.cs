// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241207151323_SeedRolesWithUsers")]
    partial class SeedRolesWithUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("503f4f0c-1732-4a07-bf1e-cc2037af5b4e"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("25e96fcf-1f21-4b22-b66a-56361895341f"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("a598250c-5da3-4a3a-90b6-c1ac01b5aa54"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("28ee76ba-3314-4928-81e7-3d3b2345b8e7"),
                            RoleId = new Guid("503f4f0c-1732-4a07-bf1e-cc2037af5b4e")
                        },
                        new
                        {
                            UserId = new Guid("3b3144f8-6feb-419f-87c7-2c85c704017e"),
                            RoleId = new Guid("503f4f0c-1732-4a07-bf1e-cc2037af5b4e")
                        },
                        new
                        {
                            UserId = new Guid("50d6ed37-9db1-4f57-9b41-a5014cb9ba74"),
                            RoleId = new Guid("503f4f0c-1732-4a07-bf1e-cc2037af5b4e")
                        },
                        new
                        {
                            UserId = new Guid("21c65c7a-e9c6-45b3-97c8-bb51fcbda27f"),
                            RoleId = new Guid("503f4f0c-1732-4a07-bf1e-cc2037af5b4e")
                        },
                        new
                        {
                            UserId = new Guid("792c7ad3-cb5b-4a8f-b7d9-fab455046c69"),
                            RoleId = new Guid("503f4f0c-1732-4a07-bf1e-cc2037af5b4e")
                        },
                        new
                        {
                            UserId = new Guid("ed2d28b7-83dd-46d9-a1e9-7e20df5312f7"),
                            RoleId = new Guid("503f4f0c-1732-4a07-bf1e-cc2037af5b4e")
                        },
                        new
                        {
                            UserId = new Guid("941bbd30-d016-4051-a604-6b3172dcc16d"),
                            RoleId = new Guid("25e96fcf-1f21-4b22-b66a-56361895341f")
                        },
                        new
                        {
                            UserId = new Guid("55b6f89c-acea-4f7c-a40d-fc6b37a78fd0"),
                            RoleId = new Guid("25e96fcf-1f21-4b22-b66a-56361895341f")
                        },
                        new
                        {
                            UserId = new Guid("56335e1a-7d1e-4b4d-8372-880cc45e2f72"),
                            RoleId = new Guid("25e96fcf-1f21-4b22-b66a-56361895341f")
                        },
                        new
                        {
                            UserId = new Guid("a194e2be-8179-4881-b26b-7e885c570d01"),
                            RoleId = new Guid("25e96fcf-1f21-4b22-b66a-56361895341f")
                        },
                        new
                        {
                            UserId = new Guid("e6c8f860-8421-4858-ae5e-540f2dca8e9d"),
                            RoleId = new Guid("25e96fcf-1f21-4b22-b66a-56361895341f")
                        },
                        new
                        {
                            UserId = new Guid("4f76cd66-0a3c-4c78-ba0f-c59e4c75d119"),
                            RoleId = new Guid("25e96fcf-1f21-4b22-b66a-56361895341f")
                        },
                        new
                        {
                            UserId = new Guid("d2afa49d-797c-46b5-a824-68e9f4910f81"),
                            RoleId = new Guid("a598250c-5da3-4a3a-90b6-c1ac01b5aa54")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("28ee76ba-3314-4928-81e7-3d3b2345b8e7"),
                            AccessFailedCount = 0,
                            AppId = new Guid("67c81e73-eb31-49b3-9df4-3c0ba5923c21"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 22, 856, DateTimeKind.Local).AddTicks(7920),
                            ConcurrencyStamp = "d5e2b7d8-721a-4418-b6a0-abf1ddefde76",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECEDg8otpcoteHpw0X0IFHC++A1KP12C0selJDZucjd0vJeinY/f+IVJoHXmpqRDKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6eef33d1-2817-48a7-af07-ccd2a4efa536",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("e745a18a-621d-4975-8c8e-dc24808eb54b")
                        },
                        new
                        {
                            Id = new Guid("3b3144f8-6feb-419f-87c7-2c85c704017e"),
                            AccessFailedCount = 0,
                            AppId = new Guid("2d4fcb19-5a83-4547-a671-4b9983059a74"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 22, 893, DateTimeKind.Local).AddTicks(2760),
                            ConcurrencyStamp = "2c4dddbc-fcd9-4e88-a91b-2120ac313741",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECy114/huQZ26O0EjAv1JqlCjhcpMYRjOB079FZEMkZlx7j/44Ob/HF3BaPyD7LINA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99c89017-a058-46d9-bd46-beef51d1023a",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("dd81e036-a12f-4401-9a7f-9a8757bbf4ca")
                        },
                        new
                        {
                            Id = new Guid("50d6ed37-9db1-4f57-9b41-a5014cb9ba74"),
                            AccessFailedCount = 0,
                            AppId = new Guid("99a915aa-d458-41f5-8a48-7a8b875c3f3b"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 22, 929, DateTimeKind.Local).AddTicks(8310),
                            ConcurrencyStamp = "d35318e5-4167-4208-a9f2-1060c5256174",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPArM3LwSbIAhB6g0BK84Y8ic2p1KwKzHtmWoS5hcJcHvkc9s4XWppiNjx+3yGekfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b569b6a5-a881-462f-b062-6f3981f745cd",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("cc51f19b-e079-4107-85b5-8339c9815bd7")
                        },
                        new
                        {
                            Id = new Guid("21c65c7a-e9c6-45b3-97c8-bb51fcbda27f"),
                            AccessFailedCount = 0,
                            AppId = new Guid("4c78381b-2408-493f-a64d-5a6213a8b482"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 22, 967, DateTimeKind.Local).AddTicks(450),
                            ConcurrencyStamp = "dee12b86-3dcd-48df-9ee2-29365f1dd43e",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFM9uYcvglTwHIDmB5OwV/rCcSu6MwpMxylMcjMrmV6NHZRI55275hmHP7Rie7D9cg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8d7c5dd-9a5a-4bdf-93e0-dee1be95247b",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("1a98f223-bd55-4860-a1bd-79b52f9de8e0")
                        },
                        new
                        {
                            Id = new Guid("792c7ad3-cb5b-4a8f-b7d9-fab455046c69"),
                            AccessFailedCount = 0,
                            AppId = new Guid("7730ac6b-21dc-45d3-a25e-d3e45ad4e5e9"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 23, 3, DateTimeKind.Local).AddTicks(4630),
                            ConcurrencyStamp = "940894f7-6bd4-40c5-a766-df780820422a",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIXeQmHWAPTgMN2xFUdMLN3BcoIqtMWFAZ0ntlwygS3kqLhQDAjEABKmr/OKXDYTTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fb370e8-b036-43bc-a5f7-736b6084599a",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("ddafac86-8447-470b-9f10-b14caf89cbff")
                        },
                        new
                        {
                            Id = new Guid("ed2d28b7-83dd-46d9-a1e9-7e20df5312f7"),
                            AccessFailedCount = 0,
                            AppId = new Guid("d9db5438-b7c4-49d0-be4e-7cb2b11d64d1"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 23, 39, DateTimeKind.Local).AddTicks(8050),
                            ConcurrencyStamp = "c0cd6139-b3e9-4110-9c71-3818e7ce71f3",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJnSNeEiJ3qCdFyhl8xMTPvQRYS+yKBSlAqm+FxfPs5F+ib4ZARVLMJV1GDx8KpIKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92d17014-bc23-4967-a6c0-2df6ef228dc3",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("0cb9e7d7-e905-41fe-bc49-114ccc1487ec")
                        },
                        new
                        {
                            Id = new Guid("941bbd30-d016-4051-a604-6b3172dcc16d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("6140f4c8-1d4a-4d4f-a844-bdc3bdede992"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 23, 75, DateTimeKind.Local).AddTicks(8310),
                            ConcurrencyStamp = "e476b31f-2f21-4d43-b63a-5fffe2b92af6",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOizxjXIJPDZ+ozXrmIJGpF2BH09lWsxVUIzlGKVqPBLTsyJCJjuDbgCs+E7CGy4mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8dfbece-a8db-4877-9ef0-c08d9095f237",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("b7e7357f-54d9-4103-aad4-8dc107ad20ed")
                        },
                        new
                        {
                            Id = new Guid("55b6f89c-acea-4f7c-a40d-fc6b37a78fd0"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e6d98fff-a613-48a5-bddb-25047c1a99fd"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 23, 113, DateTimeKind.Local).AddTicks(3100),
                            ConcurrencyStamp = "3425527e-02f9-49af-9b65-1a4bb172e046",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDkgGjIHgPWphgN/WOcVuEFREnNZOeh0zyd9oF6IAd0520wiS6tcfG9wslBdRRK8IA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85376a80-1944-4c64-8771-768baa045124",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("d00e7508-7806-45d0-ab78-28561ec31d9a")
                        },
                        new
                        {
                            Id = new Guid("56335e1a-7d1e-4b4d-8372-880cc45e2f72"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e9ca673a-dd6c-4454-a6cd-19f0d2b670d4"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 23, 150, DateTimeKind.Local).AddTicks(6780),
                            ConcurrencyStamp = "eb48ec40-009c-47f8-939c-24d85a32c363",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDg7NYKEdUIiZL+Dn5tkx2whIzOAZ7VDiaCBDzORI42Xm3I7W8aMpygWO4AUI2ZtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67eafb7d-20e0-4bfa-9429-77cbfad0673c",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("52451dab-497f-4528-a193-ad6b4de09263")
                        },
                        new
                        {
                            Id = new Guid("a194e2be-8179-4881-b26b-7e885c570d01"),
                            AccessFailedCount = 0,
                            AppId = new Guid("8e1767cd-0408-4202-a599-36caa55696e7"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 23, 187, DateTimeKind.Local).AddTicks(2260),
                            ConcurrencyStamp = "45fcf9a7-0c29-4474-ab3d-078c1d2bcbd8",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVF/HCL7iM8UQ5aiJUJlEbFXX0fLgg248r5KnaoZHPJhLXvrstj56BWGfOVFwdtaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48330758-2bae-416b-b65d-7d83a20a90e6",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("3f871ccf-99dd-4a8c-b2a3-e22297717754")
                        },
                        new
                        {
                            Id = new Guid("e6c8f860-8421-4858-ae5e-540f2dca8e9d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("c254d038-d15b-48aa-a313-36a00b59f961"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 23, 223, DateTimeKind.Local).AddTicks(8720),
                            ConcurrencyStamp = "1e93cdb2-f698-4e9a-a71e-b418ade74cc7",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqM6bBdIKm48OBVZfPBwb9tzt1JVg+vG5vUo7CjgU6CgDs+Je4HSmoNOWGfmE5Nrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23bccef5-dcf6-42cc-bc56-1b428cc9ae31",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("77a09f47-5dee-4b65-b61f-36a18316c9ad")
                        },
                        new
                        {
                            Id = new Guid("4f76cd66-0a3c-4c78-ba0f-c59e4c75d119"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e04e2d7c-8d12-4b0a-9e05-26c9b6237ab3"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 23, 259, DateTimeKind.Local).AddTicks(7940),
                            ConcurrencyStamp = "317664db-5eb3-4c41-96eb-08d624939a93",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNyu3CLDxz4mmovz5BccQmA6c8jTkJWXraBLzgVD+iVUq2q59DXPCh5KgNXT5IrYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35319b0f-d490-4f4a-bef9-a0b980181649",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("190ed2c5-5a25-42ed-aa39-57944c128510")
                        },
                        new
                        {
                            Id = new Guid("d2afa49d-797c-46b5-a824-68e9f4910f81"),
                            AccessFailedCount = 0,
                            AppId = new Guid("d2afa49d-797c-46b5-a824-68e9f4910f81"),
                            BirthDate = new DateTime(2024, 12, 7, 17, 13, 23, 296, DateTimeKind.Local).AddTicks(6450),
                            ConcurrencyStamp = "304444e3-2b02-4871-9f84-9da5399f6178",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN3Jf1A/cG1bdp0kAemrQj2M0aM2nNQXQxBdTrtor+HmSFIVRxcCeDtZhY7QJHqryw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fee458e-4beb-455f-a184-7cdc2888ec10",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("d2afa49d-797c-46b5-a824-68e9f4910f81")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\"",
                            Specialities = "[1,2,4]"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\"",
                            Specialities = "[5,6,7]"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67c81e73-eb31-49b3-9df4-3c0ba5923c21"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("34d5f532-b179-4494-a179-a281bb7f9023")
                        },
                        new
                        {
                            Id = new Guid("2d4fcb19-5a83-4547-a671-4b9983059a74"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("e84bde3e-fea8-4224-85b8-74859d28dee2")
                        },
                        new
                        {
                            Id = new Guid("99a915aa-d458-41f5-8a48-7a8b875c3f3b"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("9d1349f8-97c2-4044-bdc5-24625f244a9d")
                        },
                        new
                        {
                            Id = new Guid("4c78381b-2408-493f-a64d-5a6213a8b482"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("f7753be0-beee-45a6-8194-b8f640e6fb80")
                        },
                        new
                        {
                            Id = new Guid("7730ac6b-21dc-45d3-a25e-d3e45ad4e5e9"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("7125442d-50db-49e3-b0eb-5fc96afcfa00")
                        },
                        new
                        {
                            Id = new Guid("d9db5438-b7c4-49d0-be4e-7cb2b11d64d1"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("eb13c2fd-47f7-4042-98af-f5d387315bc3")
                        },
                        new
                        {
                            Id = new Guid("d9660b3c-27f8-42b4-aff9-bd0b044d6556"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("f8d60357-26d7-4e24-8827-dcf3f31b4232")
                        },
                        new
                        {
                            Id = new Guid("fffaee3e-fdaa-4b66-99f1-dfe3a4d3739e"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("40f5e855-1fcf-4955-a767-657ea8e74f9e")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6140f4c8-1d4a-4d4f-a844-bdc3bdede992"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("241a53e5-e84f-4244-9c83-b0b0ae9e2028")
                        },
                        new
                        {
                            Id = new Guid("e6d98fff-a613-48a5-bddb-25047c1a99fd"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("448862ca-50a8-4072-9ab5-e7cbab23daf6")
                        },
                        new
                        {
                            Id = new Guid("e9ca673a-dd6c-4454-a6cd-19f0d2b670d4"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("0d85afc5-63b8-4dde-afc2-ca9a79d410de")
                        },
                        new
                        {
                            Id = new Guid("8e1767cd-0408-4202-a599-36caa55696e7"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("c7eb7ddb-82af-4bdf-91e8-b2ae78e35f5b")
                        },
                        new
                        {
                            Id = new Guid("c254d038-d15b-48aa-a313-36a00b59f961"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("396d5e18-35f2-4b0f-b862-43d6c2d0d6b4")
                        },
                        new
                        {
                            Id = new Guid("e04e2d7c-8d12-4b0a-9e05-26c9b6237ab3"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("edda37a2-8943-46cb-ac0b-396f75978d64")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("6140f4c8-1d4a-4d4f-a844-bdc3bdede992"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("6140f4c8-1d4a-4d4f-a844-bdc3bdede992"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("e6d98fff-a613-48a5-bddb-25047c1a99fd"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("e6d98fff-a613-48a5-bddb-25047c1a99fd"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("8e1767cd-0408-4202-a599-36caa55696e7"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("e9ca673a-dd6c-4454-a6cd-19f0d2b670d4"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("e9ca673a-dd6c-4454-a6cd-19f0d2b670d4"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("e9ca673a-dd6c-4454-a6cd-19f0d2b670d4"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("c254d038-d15b-48aa-a313-36a00b59f961"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("e04e2d7c-8d12-4b0a-9e05-26c9b6237ab3"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
