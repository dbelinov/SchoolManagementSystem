// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241207173648_AddTechnicalUniversitySeed")]
    partial class AddTechnicalUniversitySeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a434ecf-c98a-4106-b878-b581d67c0072"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("1a1c795a-7a0b-4404-894e-7579ca6d2fa9"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("213218b9-821e-46c4-a797-c965607bf07f"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("878550c2-6dd0-4c95-8ca2-dbb29192bc30"),
                            RoleId = new Guid("1a434ecf-c98a-4106-b878-b581d67c0072")
                        },
                        new
                        {
                            UserId = new Guid("d93b5d88-6955-4c93-aa17-6ce0f9f2ab6e"),
                            RoleId = new Guid("1a434ecf-c98a-4106-b878-b581d67c0072")
                        },
                        new
                        {
                            UserId = new Guid("05b4fec4-3398-4821-a3cd-aa5e94aaca5b"),
                            RoleId = new Guid("1a434ecf-c98a-4106-b878-b581d67c0072")
                        },
                        new
                        {
                            UserId = new Guid("f9e9a6df-2eed-4300-8c04-89c3b8250b37"),
                            RoleId = new Guid("1a434ecf-c98a-4106-b878-b581d67c0072")
                        },
                        new
                        {
                            UserId = new Guid("81b66efa-4764-4632-94f1-15cfb12a8b56"),
                            RoleId = new Guid("1a434ecf-c98a-4106-b878-b581d67c0072")
                        },
                        new
                        {
                            UserId = new Guid("7dc36dfd-8b4a-47a0-973d-292a4fc9aac8"),
                            RoleId = new Guid("1a434ecf-c98a-4106-b878-b581d67c0072")
                        },
                        new
                        {
                            UserId = new Guid("755a44eb-fb4b-4664-8dba-912779245ce0"),
                            RoleId = new Guid("1a1c795a-7a0b-4404-894e-7579ca6d2fa9")
                        },
                        new
                        {
                            UserId = new Guid("077a6834-dbae-4cd1-af8e-ae6bb871d2b5"),
                            RoleId = new Guid("1a1c795a-7a0b-4404-894e-7579ca6d2fa9")
                        },
                        new
                        {
                            UserId = new Guid("b8ba0176-f17e-4663-9993-19926df07f9a"),
                            RoleId = new Guid("1a1c795a-7a0b-4404-894e-7579ca6d2fa9")
                        },
                        new
                        {
                            UserId = new Guid("4dc3f13b-69bd-4707-b2af-2c0239c91bc3"),
                            RoleId = new Guid("1a1c795a-7a0b-4404-894e-7579ca6d2fa9")
                        },
                        new
                        {
                            UserId = new Guid("543fc513-de34-490a-a945-8e73ebe00972"),
                            RoleId = new Guid("1a1c795a-7a0b-4404-894e-7579ca6d2fa9")
                        },
                        new
                        {
                            UserId = new Guid("0ef31af0-0864-4574-8a23-6328b6332fd4"),
                            RoleId = new Guid("1a1c795a-7a0b-4404-894e-7579ca6d2fa9")
                        },
                        new
                        {
                            UserId = new Guid("dc5e39de-ca83-4e68-966d-d2bcf2e32396"),
                            RoleId = new Guid("213218b9-821e-46c4-a797-c965607bf07f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("878550c2-6dd0-4c95-8ca2-dbb29192bc30"),
                            AccessFailedCount = 0,
                            AppId = new Guid("cf0306ed-559a-405d-b49a-dbc26a8f545d"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 367, DateTimeKind.Local).AddTicks(3100),
                            ConcurrencyStamp = "c6a9e84e-d201-4402-a6da-261f6640342c",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMV2UalTGPKh9Jn68GmfXARmt5CzRHHDj71yEX4kQUmE4DveYWozHhTvhZuM2Ax+aQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb886d0e-8cb6-415b-a46a-18b62fad99ca",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("1955984a-2c1d-40ca-a0ab-0362ff4aeba3")
                        },
                        new
                        {
                            Id = new Guid("d93b5d88-6955-4c93-aa17-6ce0f9f2ab6e"),
                            AccessFailedCount = 0,
                            AppId = new Guid("308d1732-31bc-4a1d-9437-b9721a6747fe"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 403, DateTimeKind.Local).AddTicks(8870),
                            ConcurrencyStamp = "73a1f8c0-20c3-4a4c-8806-7e6285beb49b",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEATYbwbhkrGOgJHHCxU1cky80q2jmO1gPDSCHzpiVomuuNzeNpcB9iQ0i0fFqfNe7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7934c90f-bae3-44ab-98bf-ade1a7488e5a",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("733ec8a8-bbce-43d7-8e55-78e69aefa12d")
                        },
                        new
                        {
                            Id = new Guid("05b4fec4-3398-4821-a3cd-aa5e94aaca5b"),
                            AccessFailedCount = 0,
                            AppId = new Guid("39b02cb1-3070-465d-a2f8-141c4f8b706a"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 440, DateTimeKind.Local).AddTicks(4600),
                            ConcurrencyStamp = "d5b391df-f7bc-4ef0-9bac-449a46bc01af",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMkVyvXvoptnUBjhiWxMKyscHVAwy6i3XJ/ytMcYt9KtnU1Bn8B2H3XjjTOyMlv9mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aca537b9-378e-43fd-8efc-ecbcb8839c24",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("e2ded3df-d8bb-4254-90c6-e34087ad8667")
                        },
                        new
                        {
                            Id = new Guid("f9e9a6df-2eed-4300-8c04-89c3b8250b37"),
                            AccessFailedCount = 0,
                            AppId = new Guid("ed6b0138-ef8a-46d4-b9a9-397e54c4979b"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 477, DateTimeKind.Local).AddTicks(9310),
                            ConcurrencyStamp = "6b10b83f-5d6d-4e52-8736-a0ae96751afe",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHE0F2kTV9pyRXMPvPjaXFfh3g0nPo2aBEvENEI5CWiE3uLJ6/T41SOb7RYBzTd4Rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24de12d1-4679-4ef7-95ab-bae085e7b5b7",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("760a3509-c637-44eb-9e77-94a3e650e327")
                        },
                        new
                        {
                            Id = new Guid("81b66efa-4764-4632-94f1-15cfb12a8b56"),
                            AccessFailedCount = 0,
                            AppId = new Guid("54a54f58-c7b6-4047-b818-f71e83c27430"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 514, DateTimeKind.Local).AddTicks(8160),
                            ConcurrencyStamp = "5cca4c4e-ce76-467e-a45a-6cf8248cc27a",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMxNpW0RsTJ8Bdv+Vfku3XlUDr6lQSwIzOa5kHmZNodexh+cRJsaLpqltaYGnLpqOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a07afbaa-e001-4829-bca5-5f55cd8aa95a",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("3355c4e6-40a4-4a96-99e1-9e359fabb7f5")
                        },
                        new
                        {
                            Id = new Guid("7dc36dfd-8b4a-47a0-973d-292a4fc9aac8"),
                            AccessFailedCount = 0,
                            AppId = new Guid("3068517e-7cfb-4317-84a7-59028bb9f151"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 552, DateTimeKind.Local).AddTicks(620),
                            ConcurrencyStamp = "85031b2b-56a5-49ee-820d-e22c8a14b4ec",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEByDkK9MSq9YQqjF7deo9z+U4cLqG0Z2Mq0jDJHMI0QVTUIVjlE4AEwUOV/tkvBm1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06c8c508-6487-4713-9a24-e6ad30b6301d",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("0e63e4c5-4669-4f59-bde9-62eeed38338b")
                        },
                        new
                        {
                            Id = new Guid("755a44eb-fb4b-4664-8dba-912779245ce0"),
                            AccessFailedCount = 0,
                            AppId = new Guid("32f27c54-142f-42c4-8026-b1b5b0e0d90b"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 589, DateTimeKind.Local).AddTicks(6270),
                            ConcurrencyStamp = "95364ead-1688-4ddc-a07d-ac80e14acd9b",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECLd3DJT7D0+jTXunsZrRFZrwBtVLb35PM0PBMLJdXLlYcFr7C22N2YyQqTZWzEsbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac3fc06b-bb97-4660-a302-d9b5f67ce686",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("b658f89c-13c1-46fe-8dc9-29c309188a8f")
                        },
                        new
                        {
                            Id = new Guid("077a6834-dbae-4cd1-af8e-ae6bb871d2b5"),
                            AccessFailedCount = 0,
                            AppId = new Guid("6d9d1776-1eff-4e90-863c-5e84fc5bb731"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 627, DateTimeKind.Local).AddTicks(3560),
                            ConcurrencyStamp = "428b1ba1-65f9-4462-a5ce-ae741123d453",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBqBVbRSfGTPb9rx5wFAJptz40x6D2LECh1yQVuNbp8lFh3oYLOWDkzzX32W6EaXsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bb254c6-8895-472f-95fe-d57ab34bf82e",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("2adfaa2f-edd3-4353-b047-b3715ba87dbc")
                        },
                        new
                        {
                            Id = new Guid("b8ba0176-f17e-4663-9993-19926df07f9a"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e6a65c3f-7b3f-4371-9e04-f0002bb6d6ee"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 664, DateTimeKind.Local).AddTicks(4490),
                            ConcurrencyStamp = "00b7da65-5796-4a6c-b40e-42f69fde5df6",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBAThzqHZ9anDSm+d2T9hD2WrdXYnFNTDU9/0pNAymaY/HIRH6dvCt2D7N+jIJaIzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd685cc4-6a6d-4733-a2bd-048e02696b6e",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("45785608-1b9b-4603-b248-d5a36a6e1476")
                        },
                        new
                        {
                            Id = new Guid("4dc3f13b-69bd-4707-b2af-2c0239c91bc3"),
                            AccessFailedCount = 0,
                            AppId = new Guid("a100d404-587f-4f59-9fea-d6eb3a2f9e58"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 701, DateTimeKind.Local).AddTicks(3730),
                            ConcurrencyStamp = "d6fdbd5e-c961-4182-9744-f5c992fda152",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQvsMarEJFaY80FP0TzB6otv9eMNyRgrqm9cT1/7rIIqU0hEktcHABaYt2FPE8jew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19ea778c-6fab-4b68-812b-dd2d69eaae64",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("c92bdade-5922-469d-b9ea-eb4b58b7d206")
                        },
                        new
                        {
                            Id = new Guid("543fc513-de34-490a-a945-8e73ebe00972"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e241f069-b391-4781-a616-fd0abb624e0c"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 738, DateTimeKind.Local).AddTicks(1390),
                            ConcurrencyStamp = "f49b3e56-1add-44e7-9eef-66804e408a21",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPhXU9aa7SLcTbtu/g9HsABazuqoIBjaIrG9FZ4qvOLhYJ5taQ12hA9X6RRXV56Cmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83e0f2dd-3fb3-4b45-8f0e-75d9537dd4e4",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("2b646c19-0f42-452b-a109-4234fdde3580")
                        },
                        new
                        {
                            Id = new Guid("0ef31af0-0864-4574-8a23-6328b6332fd4"),
                            AccessFailedCount = 0,
                            AppId = new Guid("19d20ebe-74de-4888-9a3b-07217cd79912"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 774, DateTimeKind.Local).AddTicks(8740),
                            ConcurrencyStamp = "8a1a34d1-2d6e-4b4d-a4ee-055302cb9c60",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJP67dRlDiQnbDC5aswM80axpRu1e8X/YMAdwoLEh6VHuMWCeXvOwM0yZbPTsI67Cg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05358068-1008-4672-9670-0d9337cd292d",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("b142ecc2-0e4d-4d7b-b239-0f507b1c081e")
                        },
                        new
                        {
                            Id = new Guid("dc5e39de-ca83-4e68-966d-d2bcf2e32396"),
                            AccessFailedCount = 0,
                            AppId = new Guid("dc5e39de-ca83-4e68-966d-d2bcf2e32396"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 36, 47, 811, DateTimeKind.Local).AddTicks(7160),
                            ConcurrencyStamp = "19237b16-8962-46a3-84cf-3043b1019c69",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOT8rSZIRUew970D+Tnh0w36LYhES7mizUM/1wPvXHM2kyuZfS1El7yR1MrobJ1pEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39350d03-2713-49a3-bff5-7380e2c8728c",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("dc5e39de-ca83-4e68-966d-d2bcf2e32396")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\"",
                            Specialities = "[1,2,4]"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\"",
                            Specialities = "[5,6,7]"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Profesor Georgi Bradistilov 11, Sofia, Bulgaria",
                            Description = "The Technical University of Sofia is Bulgaria's largest and foremost academic establishment for higher engineering education.",
                            LogoUrl = "https://scontent.fsof1-1.fna.fbcdn.net/v/t39.30808-6/453179855_1108969364009343_5412650960044976974_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=qPhfwrpLKZUQ7kNvgGHjtnI&_nc_zt=23&_nc_ht=scontent.fsof1-1.fna&_nc_gid=A1xPbdI_kb_P2-V2ZeYF9Ij&oh=00_AYCD4-wxXkM0nUjRh1A3Z58xa9vtxRdQAf4fh6OnOsLa_g&oe=675A5DED",
                            Name = "Technical University of Sofia",
                            Specialities = "[2,1]"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf0306ed-559a-405d-b49a-dbc26a8f545d"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("76730023-c930-4f3e-aa62-e82f9c47893a")
                        },
                        new
                        {
                            Id = new Guid("308d1732-31bc-4a1d-9437-b9721a6747fe"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("11462c1e-acd4-4cc5-9fd8-dc7fb68bdae5")
                        },
                        new
                        {
                            Id = new Guid("39b02cb1-3070-465d-a2f8-141c4f8b706a"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("c9af8275-d9cc-4cdf-a5eb-64e90b927b05")
                        },
                        new
                        {
                            Id = new Guid("ed6b0138-ef8a-46d4-b9a9-397e54c4979b"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("41e5205f-458f-4dd1-85f8-665a453949d2")
                        },
                        new
                        {
                            Id = new Guid("54a54f58-c7b6-4047-b818-f71e83c27430"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("4cbf3802-5c87-4e97-9665-b4ba4d7f2f59")
                        },
                        new
                        {
                            Id = new Guid("3068517e-7cfb-4317-84a7-59028bb9f151"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("3ae16754-0805-4754-b57d-41a55d4330eb")
                        },
                        new
                        {
                            Id = new Guid("1bf9d576-d586-4838-814a-d17b71603d19"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("db0b0625-f94d-4a9e-9b6b-1480bded8ad0")
                        },
                        new
                        {
                            Id = new Guid("982bcdad-216b-4e6d-86b9-a46ef52d8d41"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("6db9e0b3-5332-446e-bd11-0d542fd6a149")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32f27c54-142f-42c4-8026-b1b5b0e0d90b"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("2856969c-386b-4ffc-8246-ce823cddb2d0")
                        },
                        new
                        {
                            Id = new Guid("6d9d1776-1eff-4e90-863c-5e84fc5bb731"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("2fb52b49-3247-4677-bb03-357bebdd70fb")
                        },
                        new
                        {
                            Id = new Guid("e6a65c3f-7b3f-4371-9e04-f0002bb6d6ee"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("a9684df7-061a-460a-a288-d1797d7a2a0b")
                        },
                        new
                        {
                            Id = new Guid("a100d404-587f-4f59-9fea-d6eb3a2f9e58"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("ceb3fcbd-c14a-4476-9bd5-653f36ef9927")
                        },
                        new
                        {
                            Id = new Guid("e241f069-b391-4781-a616-fd0abb624e0c"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("51edafa2-b82e-48eb-adac-f135722c3f08")
                        },
                        new
                        {
                            Id = new Guid("19d20ebe-74de-4888-9a3b-07217cd79912"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("84d76407-d98a-4540-8407-a250cda63be4")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("32f27c54-142f-42c4-8026-b1b5b0e0d90b"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("32f27c54-142f-42c4-8026-b1b5b0e0d90b"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("6d9d1776-1eff-4e90-863c-5e84fc5bb731"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("6d9d1776-1eff-4e90-863c-5e84fc5bb731"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("a100d404-587f-4f59-9fea-d6eb3a2f9e58"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("e6a65c3f-7b3f-4371-9e04-f0002bb6d6ee"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("e6a65c3f-7b3f-4371-9e04-f0002bb6d6ee"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("e6a65c3f-7b3f-4371-9e04-f0002bb6d6ee"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("e241f069-b391-4781-a616-fd0abb624e0c"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("19d20ebe-74de-4888-9a3b-07217cd79912"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
