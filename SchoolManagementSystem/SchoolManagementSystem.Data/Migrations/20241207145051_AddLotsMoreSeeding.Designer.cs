// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241207145051_AddLotsMoreSeeding")]
    partial class AddLotsMoreSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d9e6766-1f6b-48f1-b848-3569328d80ee"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("27d93207-c6d6-4bb2-aca1-ac064ea06f2c"),
                            RoleId = new Guid("5d9e6766-1f6b-48f1-b848-3569328d80ee")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f7967ad-d1a5-4768-ac07-f2d04b7861bf"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 50, 743, DateTimeKind.Local).AddTicks(8470),
                            ConcurrencyStamp = "9c9ec759-b53f-4afe-8952-0d52bef1b603",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIWqfM/kY/ZvKLydR+Z6IcOKABV60iqrE+JS/fgr8KAvrFD+6ogqVOYPAYEU0KINYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81bc6f26-4235-470c-a8fa-11d45c377c3d",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("6854ffa6-4097-47bc-b39e-be7eb91a6193"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 50, 779, DateTimeKind.Local).AddTicks(8450),
                            ConcurrencyStamp = "37f427ff-6750-48f1-8473-91b87cd10c14",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEITm6X3c9qyl290mlx/spupgzwQ0bRjstYax6sKA6BbOlpTi21t1XJjS67I0by5TaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7953e6a-2feb-43a8-9513-11cad738b3a4",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("30783f80-4041-4984-bd45-a8dd80cf1476"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 50, 815, DateTimeKind.Local).AddTicks(3140),
                            ConcurrencyStamp = "eae6fbc6-fdc1-4fee-a118-cff033017707",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECc8+EcdQ+tsbkxx3zkGkWZ5Y5rMfv3FGiXpcOWz5O8ZHOY6Q7FFMyDo3hEJ37blhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b604fac-2156-4dde-ae99-5f9c334d8079",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("71f4a881-83f8-4215-adb6-98452c16cb2f"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 50, 851, DateTimeKind.Local).AddTicks(1330),
                            ConcurrencyStamp = "200997ec-d0f0-42af-8068-59c78ba563bd",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDIgKj7ejAx0devH/3qSbvIGTDsZoC8naJQfSdP3CIT1o14B8iyYjGIn7xjuztM9EQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3be6788b-823b-4c80-ba3d-b96d41a4179f",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4aba1af4-fbf7-41a5-9391-668237458048"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 50, 887, DateTimeKind.Local).AddTicks(6460),
                            ConcurrencyStamp = "d2461630-8673-495b-b4d0-6371008707e2",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBlQxqmJUfjJhUkVtFOo8EjG7XAEdBu3W2+KaZrLtat+PGym+4S0H1CYlJKiEPenaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "066c40cf-f968-4102-86bd-5b8633268f74",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("08fae2a9-57c6-447a-a04f-d961c138061e"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 50, 924, DateTimeKind.Local).AddTicks(7690),
                            ConcurrencyStamp = "2a99e63b-6299-4d9c-99fe-d05b288a374e",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENDfMRJ2fMZZA6k5JKnHJt4bXBW1gpCFlj3xJBbgpz8Ufyvk5/bxZHWrlLzyXQwk/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "932a5260-9317-41bb-8d12-78eec9c105d4",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("63d4f8d6-a89d-43fd-bc42-2a88f7e6501f"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 50, 960, DateTimeKind.Local).AddTicks(8710),
                            ConcurrencyStamp = "e750a8ca-a332-48ad-b6e7-7db4a079a279",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE8SYttZtSOclX0CLYH/Lq9IScmLVvvHRdU7vSlJq44TsrWhTgM1eeh7YaVL9yhNFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c580b80-65f1-4c96-83b6-06baf1199e73",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("aa4ffa41-7f19-43ca-b81c-50c8c517ced3"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 50, 996, DateTimeKind.Local).AddTicks(9550),
                            ConcurrencyStamp = "7ed8f542-3a57-4769-b56c-b48321a74603",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECx3KAB6I0YiMa/hh4pEm647UmJ3kCDuWVV/Q1ESxHEDtWH+PU2HcfRUVhYH3Yxuqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cafb0065-0f8c-4a98-9e02-4df2d8cbb182",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("50b39f98-2752-4089-b256-1fd1281b956d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 51, 33, DateTimeKind.Local).AddTicks(2660),
                            ConcurrencyStamp = "0db118ce-7a9f-4e16-bc1b-68bd1653df50",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKJYeRXRgE4RRH1VqsvFfpk1ZMOKClGLfHgoFDesa+Y/1+ExrheclseiqjJ1EHIsmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fd93e9e-1606-42ab-92dd-9764a492388d",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4fe2a962-c824-4e7e-9461-f21e898f5725"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 51, 69, DateTimeKind.Local).AddTicks(9430),
                            ConcurrencyStamp = "6e0fb6b8-dd42-41ec-a8a4-14a0394938ce",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDyUk/NVq9DuNvXsmyfkq/zr2nIzk7LTrZAHK8QCfo136Fw5NDXiKFkoSs8OZxSjUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "478f9e1f-8502-4d54-b612-56dd9ad92c77",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("a8fb444c-47f8-487a-b8fd-e3b31405059c"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 51, 106, DateTimeKind.Local).AddTicks(2670),
                            ConcurrencyStamp = "511c2076-241a-40dc-9041-8bbed14fdc87",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENUrbeAO4DFSKxMQI8O+gy5mbBUezwI7Wh53hPTOOxBmNrNBafjr6Qax9Ah4vOXbGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e8b4303-c01c-48bf-a11e-df643c33b735",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("072d2743-57c8-410e-bbf3-edbf5d9ecbe9"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00000000-0000-0000-0000-000000000000"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 51, 142, DateTimeKind.Local).AddTicks(7220),
                            ConcurrencyStamp = "3c5b80d7-805a-4339-a5db-b2b5fbbcfa4f",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGeSMsCiGBDwj1y+A+bXxNtIUPeSe3AIo8mIes3g6g894d8r+0SH/Xhm+xZV08tL3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7124d01c-cc35-4baf-af88-2eb2e5b35786",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("27d93207-c6d6-4bb2-aca1-ac064ea06f2c"),
                            AccessFailedCount = 0,
                            AppId = new Guid("27d93207-c6d6-4bb2-aca1-ac064ea06f2c"),
                            BirthDate = new DateTime(2024, 12, 7, 16, 50, 51, 179, DateTimeKind.Local).AddTicks(8730),
                            ConcurrencyStamp = "cac8c44c-a2dd-45fe-a667-5d9bbd8ade67",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEELPbLoUPG6y3jTdMhhGN9zrJjw0UfgllyFMDQOhM3MPgAszsZjZssvI2W87kVoUug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4c40ccc-e397-4aa4-810a-9ace78482295",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("27d93207-c6d6-4bb2-aca1-ac064ea06f2c")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\"",
                            Specialities = "[1,2,4]"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\"",
                            Specialities = "[5,6,7]"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60a32be9-80db-43d6-86d8-fba9026c5b97"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("0dd55aba-6dc2-46c3-96b1-5e80c46fae47")
                        },
                        new
                        {
                            Id = new Guid("d6e415c2-db6f-4180-b46d-8a18619206d5"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("58c5293f-0c14-4e96-91ac-c8c496e6b7d1")
                        },
                        new
                        {
                            Id = new Guid("cfb7c730-7cb9-4747-9002-5340b87f86ea"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("79603cee-bd7f-4bf4-aad8-a00426474eb3")
                        },
                        new
                        {
                            Id = new Guid("2d6b128d-0749-48da-a276-9cccb5193031"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("3735f7e5-8ea8-4959-94a9-dd8cc8e00a6f")
                        },
                        new
                        {
                            Id = new Guid("fe82a978-3e8d-4245-a359-cdec8d8fb34a"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("52f149e4-6400-482c-8cd7-cd2abd5e4bb4")
                        },
                        new
                        {
                            Id = new Guid("d369644f-eb36-42a4-b40d-520573b1b1c5"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("73c8d5de-d99f-47c7-becc-4b1c5d5890dc")
                        },
                        new
                        {
                            Id = new Guid("55d211c2-502d-46b9-a352-ca93fcde88f6"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("24f9a994-a955-47b3-9f7a-46ef191f9b43")
                        },
                        new
                        {
                            Id = new Guid("f25aba94-a3d8-4c9a-8b43-301aaa949623"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("8c6af0bc-58e0-465b-ba6e-69f247a57fe7")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4cf841d-7cc5-488e-981b-4f013609511d"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("f9ef2ebf-1790-4f08-a43d-bb48674b4f0e")
                        },
                        new
                        {
                            Id = new Guid("bc996b87-8b2e-488f-ac8c-dcd5426c6bcb"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("9514a277-1b6f-4f76-8971-87085aca49cc")
                        },
                        new
                        {
                            Id = new Guid("3546d44c-5140-420a-81f3-3cd83efa94b8"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("0e85e906-a7e0-4089-9360-956409668869")
                        },
                        new
                        {
                            Id = new Guid("4a4ff2b0-0979-4426-b2fe-f9d6416a205c"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("5295d003-906b-41ba-af78-0f5aa101919f")
                        },
                        new
                        {
                            Id = new Guid("cc3941c3-6583-407e-a187-dfa606a3cb54"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("b19ff647-c4ac-461e-9f9c-37e8cd37e69c")
                        },
                        new
                        {
                            Id = new Guid("f7f20e9d-22a6-4da7-837b-55fcd3b041bb"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("068f0c3f-bb69-4607-8f45-14b1b6357c51")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("c4cf841d-7cc5-488e-981b-4f013609511d"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("c4cf841d-7cc5-488e-981b-4f013609511d"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("bc996b87-8b2e-488f-ac8c-dcd5426c6bcb"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("bc996b87-8b2e-488f-ac8c-dcd5426c6bcb"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("4a4ff2b0-0979-4426-b2fe-f9d6416a205c"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("3546d44c-5140-420a-81f3-3cd83efa94b8"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("3546d44c-5140-420a-81f3-3cd83efa94b8"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("3546d44c-5140-420a-81f3-3cd83efa94b8"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("cc3941c3-6583-407e-a187-dfa606a3cb54"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("f7f20e9d-22a6-4da7-837b-55fcd3b041bb"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
