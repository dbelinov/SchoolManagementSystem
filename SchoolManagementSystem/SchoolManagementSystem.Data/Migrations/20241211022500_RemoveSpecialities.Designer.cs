// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241211022500_RemoveSpecialities")]
    partial class RemoveSpecialities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("98991030-82f4-4140-81aa-184a3aefdf6b"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("29145607-ee1c-4029-b9c8-acd74369af51"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("559177f3-06ab-457c-80ef-f10e6cbd9904"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a9e44e08-4db0-44e9-83fe-2830b4d35fc7"),
                            RoleId = new Guid("98991030-82f4-4140-81aa-184a3aefdf6b")
                        },
                        new
                        {
                            UserId = new Guid("9ea54fb5-ac5d-4a7a-9c2a-fa613f73cb71"),
                            RoleId = new Guid("98991030-82f4-4140-81aa-184a3aefdf6b")
                        },
                        new
                        {
                            UserId = new Guid("450a7685-d2a9-44ed-83f3-9dea3e581001"),
                            RoleId = new Guid("98991030-82f4-4140-81aa-184a3aefdf6b")
                        },
                        new
                        {
                            UserId = new Guid("5cc83783-7b01-4615-af5c-6d91aeaa6a4d"),
                            RoleId = new Guid("98991030-82f4-4140-81aa-184a3aefdf6b")
                        },
                        new
                        {
                            UserId = new Guid("d8665fb6-5acb-4038-855e-7057fa11f533"),
                            RoleId = new Guid("98991030-82f4-4140-81aa-184a3aefdf6b")
                        },
                        new
                        {
                            UserId = new Guid("f0c4f887-1c30-406c-9139-aa335bd358fd"),
                            RoleId = new Guid("98991030-82f4-4140-81aa-184a3aefdf6b")
                        },
                        new
                        {
                            UserId = new Guid("b7a12006-3c4b-491a-8919-61e5db054fe4"),
                            RoleId = new Guid("29145607-ee1c-4029-b9c8-acd74369af51")
                        },
                        new
                        {
                            UserId = new Guid("4b93c160-f4a5-49c3-9515-1fe674f586b3"),
                            RoleId = new Guid("29145607-ee1c-4029-b9c8-acd74369af51")
                        },
                        new
                        {
                            UserId = new Guid("e4fb28aa-5b5e-43ff-8db8-40c440c04e43"),
                            RoleId = new Guid("29145607-ee1c-4029-b9c8-acd74369af51")
                        },
                        new
                        {
                            UserId = new Guid("2af1622e-0207-40b2-86ae-1ba0c315b92d"),
                            RoleId = new Guid("29145607-ee1c-4029-b9c8-acd74369af51")
                        },
                        new
                        {
                            UserId = new Guid("72905393-6010-4fe8-aee0-30b7c86fb8a2"),
                            RoleId = new Guid("29145607-ee1c-4029-b9c8-acd74369af51")
                        },
                        new
                        {
                            UserId = new Guid("7e090d05-998c-4f78-bae2-6987dc8f2f2a"),
                            RoleId = new Guid("29145607-ee1c-4029-b9c8-acd74369af51")
                        },
                        new
                        {
                            UserId = new Guid("734fb776-18d9-4887-9c51-8c780a1c10c1"),
                            RoleId = new Guid("559177f3-06ab-457c-80ef-f10e6cbd9904")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9e44e08-4db0-44e9-83fe-2830b4d35fc7"),
                            AccessFailedCount = 0,
                            AppId = new Guid("0326e745-c79d-409f-bb77-9ae389374b99"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 24, 59, 953, DateTimeKind.Local).AddTicks(4480),
                            ConcurrencyStamp = "0a175427-e301-44a6-9098-447d2322c33b",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJzgbQJU0cm3WjNGR23k1n5lnFo526E4MGho6fL76sLisE0JyXpO6iLiUMvGE2z5xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51b533c4-1626-49f3-8a72-29e2fd47fe6d",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("8fb1e105-5617-43fb-b5f5-6a16d4291442")
                        },
                        new
                        {
                            Id = new Guid("9ea54fb5-ac5d-4a7a-9c2a-fa613f73cb71"),
                            AccessFailedCount = 0,
                            AppId = new Guid("16e87d2e-73a7-45ff-806a-a21a17fe1e9e"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 24, 59, 988, DateTimeKind.Local).AddTicks(7250),
                            ConcurrencyStamp = "8b78919f-c070-49f0-a37e-f87fab66c80f",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHDvcv2BYP9RUO73FPEHuZtB6uf3yNUdioCkLXmXumNvLiaw/KYHeWJYinFVotbqjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d08dbb0b-5422-4ebc-bb5e-30575e1dfd93",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("07309ca7-2a10-4597-bafb-fcbe93241f31")
                        },
                        new
                        {
                            Id = new Guid("450a7685-d2a9-44ed-83f3-9dea3e581001"),
                            AccessFailedCount = 0,
                            AppId = new Guid("fc0acd70-bebb-47d1-bedf-d84599c2e7aa"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 24, DateTimeKind.Local).AddTicks(6510),
                            ConcurrencyStamp = "7168fa25-0da9-4f93-8244-310cc1d42710",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM+kNKfr0QBSf+b0OoPzq3cv+8GSUVjV0iUtIIjONfK8r+sTpCcK2gHgw43HVNqdHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a14a2d3-6c07-4519-b2b0-cf2ae68092b4",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("4011caaa-1166-4a21-860e-a757bfee8664")
                        },
                        new
                        {
                            Id = new Guid("5cc83783-7b01-4615-af5c-6d91aeaa6a4d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("40ef009d-e144-40e2-bdcc-fc5a055d7626"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 61, DateTimeKind.Local).AddTicks(9540),
                            ConcurrencyStamp = "1805b96f-6043-4ad3-983f-4829fa4ad2aa",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKr1DoHQMGgSNOepwLwdTH0ioC/s6TXxGBxuim26iNZFCZLYePE80G2oF+uYI5obRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "539e353a-40bf-47b1-b116-546d54d043c7",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("45deb74a-c923-41cc-9b15-a707ed3bed9b")
                        },
                        new
                        {
                            Id = new Guid("d8665fb6-5acb-4038-855e-7057fa11f533"),
                            AccessFailedCount = 0,
                            AppId = new Guid("d93be197-4ad6-440d-b0eb-fae09d14637c"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 98, DateTimeKind.Local).AddTicks(7890),
                            ConcurrencyStamp = "d78c00d8-aa56-4989-9959-dba720a5eefa",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJqWI9K3U44Wuc4xdCJP8A0cNTVr+dNU1YpAlJzGt9BLk6o5ZS3FAnGXhieJX118XA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "301252e9-61ca-4b0f-b86a-44a32686d108",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("7fa37445-2450-447b-8cab-15e7ab6ef72b")
                        },
                        new
                        {
                            Id = new Guid("f0c4f887-1c30-406c-9139-aa335bd358fd"),
                            AccessFailedCount = 0,
                            AppId = new Guid("4da28e25-3dbb-4b6c-be20-e3d5f57444aa"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 135, DateTimeKind.Local).AddTicks(1410),
                            ConcurrencyStamp = "152320f1-ce83-4a64-83f8-b995a10c70d4",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQ7XkIUflAFpmgVtMZEg1t3n6Ykkj9UXeFD9czvPsAA2wcXt3//pj4fKXcvcO/88A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff675605-9cef-44cb-979e-d1260102947c",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("5bb0264d-018b-4517-84fc-837a40a1b1da")
                        },
                        new
                        {
                            Id = new Guid("b7a12006-3c4b-491a-8919-61e5db054fe4"),
                            AccessFailedCount = 0,
                            AppId = new Guid("2ae480a1-ecb8-45f6-84f8-478501a0eab3"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 171, DateTimeKind.Local).AddTicks(7110),
                            ConcurrencyStamp = "3ade3dbb-fa24-43ce-bf75-4b47cff8501a",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECv8Dl26UH+CX8CBQR7J7epkvNXj7YvLDSHIaKfouapl9S/FfSllqVOdQ4f9ocYsmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d824925-9bfb-46b1-92e2-41962c9de32f",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("cd87c41a-5186-4b3a-b016-b5ae2318a673")
                        },
                        new
                        {
                            Id = new Guid("4b93c160-f4a5-49c3-9515-1fe674f586b3"),
                            AccessFailedCount = 0,
                            AppId = new Guid("c9c8a4f2-adba-47d4-af81-3956a574c1de"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 208, DateTimeKind.Local).AddTicks(3700),
                            ConcurrencyStamp = "7f992c54-d25a-4c02-a877-d9432e70a4de",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEML15ayWyjuIj2m4vLNkFy8o5n6d8H3lJ/n2iy9kx6SFRp7i+WDHT205I/EMyA4B+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dea5f84-3811-4140-bbcf-0662de915ac2",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("3e5273f0-3f0a-43b9-957d-ac0841ff0bc0")
                        },
                        new
                        {
                            Id = new Guid("e4fb28aa-5b5e-43ff-8db8-40c440c04e43"),
                            AccessFailedCount = 0,
                            AppId = new Guid("108de0ae-1b01-4a4b-9b19-376b1dfad843"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 245, DateTimeKind.Local).AddTicks(150),
                            ConcurrencyStamp = "cfc68818-5e52-441a-8a4d-c280501f1587",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKUR/8+qjcZqir6KO+Z/Sdg4kDSXBaOWtZjfrhFVTjlvvIGgNf6XF/uCJsc1umHCvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03edc2e9-468b-4958-8a0b-089016a72936",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("e1999a4a-54b4-4649-96ab-920e17b61804")
                        },
                        new
                        {
                            Id = new Guid("2af1622e-0207-40b2-86ae-1ba0c315b92d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("92dbab9c-7104-4082-8015-68aa45a3d099"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 281, DateTimeKind.Local).AddTicks(4400),
                            ConcurrencyStamp = "bc91398a-ce5e-4ce4-b08c-e1fc83422067",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKvCihXBW6cczTHkq5jSXNWfhsNtqtAMRhFJlYzzusJiA6b5mmu5bLABtQl1C9b/HA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46a66bb4-60f2-49f4-b309-1c707738dacf",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("afecca87-4967-4e59-ae85-21828cfee9ef")
                        },
                        new
                        {
                            Id = new Guid("72905393-6010-4fe8-aee0-30b7c86fb8a2"),
                            AccessFailedCount = 0,
                            AppId = new Guid("38e4e0a1-36c9-4b8f-8aec-4530238e68d3"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 317, DateTimeKind.Local).AddTicks(5430),
                            ConcurrencyStamp = "dda514f3-8b6d-42b3-9d43-53dd4da225d7",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBhVN6CYGs0bpzhXLZIBxGYfWR1q0S7iHeWEWBJTmJOmOrWrKD9w36Qi6WTlGRxWFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff85146f-419b-4d28-952d-b343bf944ffd",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("b29250a6-824a-4281-8410-1dd2e35e54a1")
                        },
                        new
                        {
                            Id = new Guid("7e090d05-998c-4f78-bae2-6987dc8f2f2a"),
                            AccessFailedCount = 0,
                            AppId = new Guid("b148220f-f8ee-40ec-8a61-4f8d4e81722f"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 353, DateTimeKind.Local).AddTicks(5230),
                            ConcurrencyStamp = "3267e3e4-c2e8-4f00-b524-a950bc172682",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPmPX59/2153rqZtReX6QUlBWd5hvhJ/XIi6GYuhBwmglmLSc8x/x0Srsoa0AUTusg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ecb29a9-9a86-42c7-82dd-75c3e1abe1ea",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("97b12d1e-9ab8-489d-9d0f-9b1eec82d358")
                        },
                        new
                        {
                            Id = new Guid("734fb776-18d9-4887-9c51-8c780a1c10c1"),
                            AccessFailedCount = 0,
                            AppId = new Guid("734fb776-18d9-4887-9c51-8c780a1c10c1"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 25, 0, 389, DateTimeKind.Local).AddTicks(1460),
                            ConcurrencyStamp = "28af33a0-2a88-48c3-b8cc-4c69d28c7017",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPNOoIZkgEwJheIKLsz14Xm2gXfJbgOVbU9AtPwzLTkhxLrf8RFrit8DspR7MwylwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c671f5b5-7686-4054-973a-1c0dc795e871",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("734fb776-18d9-4887-9c51-8c780a1c10c1")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\""
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\""
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sveti Kliment Ohridski 8, Sofia, Bulgaria",
                            Description = "The Technical University of Sofia is Bulgaria's largest and foremost academic establishment for higher engineering education.",
                            LogoUrl = "https://scontent.fsof1-1.fna.fbcdn.net/v/t39.30808-6/453179855_1108969364009343_5412650960044976974_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=qPhfwrpLKZUQ7kNvgGHjtnI&_nc_zt=23&_nc_ht=scontent.fsof1-1.fna&_nc_gid=A1xPbdI_kb_P2-V2ZeYF9Ij&oh=00_AYCD4-wxXkM0nUjRh1A3Z58xa9vtxRdQAf4fh6OnOsLa_g&oe=675A5DED",
                            Name = "Technical University of Sofia"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0326e745-c79d-409f-bb77-9ae389374b99"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("8fb1e105-5617-43fb-b5f5-6a16d4291442")
                        },
                        new
                        {
                            Id = new Guid("16e87d2e-73a7-45ff-806a-a21a17fe1e9e"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("07309ca7-2a10-4597-bafb-fcbe93241f31")
                        },
                        new
                        {
                            Id = new Guid("fc0acd70-bebb-47d1-bedf-d84599c2e7aa"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("4011caaa-1166-4a21-860e-a757bfee8664")
                        },
                        new
                        {
                            Id = new Guid("40ef009d-e144-40e2-bdcc-fc5a055d7626"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("45deb74a-c923-41cc-9b15-a707ed3bed9b")
                        },
                        new
                        {
                            Id = new Guid("d93be197-4ad6-440d-b0eb-fae09d14637c"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("7fa37445-2450-447b-8cab-15e7ab6ef72b")
                        },
                        new
                        {
                            Id = new Guid("4da28e25-3dbb-4b6c-be20-e3d5f57444aa"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("5bb0264d-018b-4517-84fc-837a40a1b1da")
                        },
                        new
                        {
                            Id = new Guid("7b128a92-4016-43e8-b4bc-5683107e0da7"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("f4797d43-36e3-467d-b8a3-2b503625e031")
                        },
                        new
                        {
                            Id = new Guid("4fa85c92-fc73-42a6-bc26-ce00728c6724"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("56251a81-8190-4e96-bab3-b6edcce34e63")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ae480a1-ecb8-45f6-84f8-478501a0eab3"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("cd87c41a-5186-4b3a-b016-b5ae2318a673")
                        },
                        new
                        {
                            Id = new Guid("c9c8a4f2-adba-47d4-af81-3956a574c1de"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("3e5273f0-3f0a-43b9-957d-ac0841ff0bc0")
                        },
                        new
                        {
                            Id = new Guid("108de0ae-1b01-4a4b-9b19-376b1dfad843"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("e1999a4a-54b4-4649-96ab-920e17b61804")
                        },
                        new
                        {
                            Id = new Guid("92dbab9c-7104-4082-8015-68aa45a3d099"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("afecca87-4967-4e59-ae85-21828cfee9ef")
                        },
                        new
                        {
                            Id = new Guid("38e4e0a1-36c9-4b8f-8aec-4530238e68d3"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("b29250a6-824a-4281-8410-1dd2e35e54a1")
                        },
                        new
                        {
                            Id = new Guid("b148220f-f8ee-40ec-8a61-4f8d4e81722f"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("97b12d1e-9ab8-489d-9d0f-9b1eec82d358")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("2ae480a1-ecb8-45f6-84f8-478501a0eab3"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("2ae480a1-ecb8-45f6-84f8-478501a0eab3"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("c9c8a4f2-adba-47d4-af81-3956a574c1de"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("c9c8a4f2-adba-47d4-af81-3956a574c1de"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("92dbab9c-7104-4082-8015-68aa45a3d099"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("108de0ae-1b01-4a4b-9b19-376b1dfad843"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("108de0ae-1b01-4a4b-9b19-376b1dfad843"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("108de0ae-1b01-4a4b-9b19-376b1dfad843"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("38e4e0a1-36c9-4b8f-8aec-4530238e68d3"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("b148220f-f8ee-40ec-8a61-4f8d4e81722f"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
