// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241211125631_AddProjectSeeding")]
    partial class AddProjectSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e14915b6-5db8-4efc-bbdd-9dd0155b1b5c"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("5278e7cc-b2f8-4418-9956-ea94edfa5e11"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("315a7adf-a26a-4f88-9e54-d7ffc9e73c40"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("65af7c3c-17f3-4a98-8700-756ea1094974"),
                            RoleId = new Guid("e14915b6-5db8-4efc-bbdd-9dd0155b1b5c")
                        },
                        new
                        {
                            UserId = new Guid("96ac60a9-78d1-4713-a9ec-b86ddbb36447"),
                            RoleId = new Guid("e14915b6-5db8-4efc-bbdd-9dd0155b1b5c")
                        },
                        new
                        {
                            UserId = new Guid("5caf9d09-3309-4901-b509-a8f8c9d7c2c8"),
                            RoleId = new Guid("e14915b6-5db8-4efc-bbdd-9dd0155b1b5c")
                        },
                        new
                        {
                            UserId = new Guid("d7fa9658-914f-49fa-aa7a-180cf7fd4469"),
                            RoleId = new Guid("e14915b6-5db8-4efc-bbdd-9dd0155b1b5c")
                        },
                        new
                        {
                            UserId = new Guid("3ec9308c-a947-4e12-b917-1eb212021dbf"),
                            RoleId = new Guid("e14915b6-5db8-4efc-bbdd-9dd0155b1b5c")
                        },
                        new
                        {
                            UserId = new Guid("cf5cee16-e33b-4af9-a79c-0c5b20cf9696"),
                            RoleId = new Guid("e14915b6-5db8-4efc-bbdd-9dd0155b1b5c")
                        },
                        new
                        {
                            UserId = new Guid("79434be7-ca25-46e5-91fd-ccc52bb88a5b"),
                            RoleId = new Guid("5278e7cc-b2f8-4418-9956-ea94edfa5e11")
                        },
                        new
                        {
                            UserId = new Guid("d1c0e933-691b-4764-aa77-d51f471422cf"),
                            RoleId = new Guid("5278e7cc-b2f8-4418-9956-ea94edfa5e11")
                        },
                        new
                        {
                            UserId = new Guid("bccc53a4-ce1b-46cb-a86b-cc558f07f699"),
                            RoleId = new Guid("5278e7cc-b2f8-4418-9956-ea94edfa5e11")
                        },
                        new
                        {
                            UserId = new Guid("09f1c2b8-20cf-4a65-b28f-088aaa54acdd"),
                            RoleId = new Guid("5278e7cc-b2f8-4418-9956-ea94edfa5e11")
                        },
                        new
                        {
                            UserId = new Guid("afd51e85-d30a-47df-a125-535887f7acab"),
                            RoleId = new Guid("5278e7cc-b2f8-4418-9956-ea94edfa5e11")
                        },
                        new
                        {
                            UserId = new Guid("02e6027c-af79-4d89-ad82-51fd24c666cb"),
                            RoleId = new Guid("5278e7cc-b2f8-4418-9956-ea94edfa5e11")
                        },
                        new
                        {
                            UserId = new Guid("e2e853ce-28be-472a-9bb3-e134387475ed"),
                            RoleId = new Guid("315a7adf-a26a-4f88-9e54-d7ffc9e73c40")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("65af7c3c-17f3-4a98-8700-756ea1094974"),
                            AccessFailedCount = 0,
                            AppId = new Guid("d09aa447-0f1b-4474-b503-252af834f91c"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 415, DateTimeKind.Local).AddTicks(8620),
                            ConcurrencyStamp = "7f95b1d8-c60e-460e-b8f9-873e695e8942",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMpXLjsu5Nr8kcj/biiK5Hc3r7z2d3fOYtNkQtEzab21+jgHnTChyRfcEHLIf7QomQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad83f695-f1c4-42fe-913a-7166258f54fa",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("0afc693d-f519-47e1-9019-8cbc9c2f99e4")
                        },
                        new
                        {
                            Id = new Guid("96ac60a9-78d1-4713-a9ec-b86ddbb36447"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e6f8df2b-8bd6-4036-8beb-d0a2bb0e45f2"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 452, DateTimeKind.Local).AddTicks(3070),
                            ConcurrencyStamp = "b18d0901-24ff-4614-af83-a39a476b70fd",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDlEaZuNb1zMbL99iRIxA6Xqqo1dzVcVomRcCuboz+m1Omr9rnFHMIexwnwMkLq56A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ed772ee-ec44-4ebd-9d48-bd62f7604d21",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("258e084a-3f9e-450a-bae8-68de4a874efe")
                        },
                        new
                        {
                            Id = new Guid("5caf9d09-3309-4901-b509-a8f8c9d7c2c8"),
                            AccessFailedCount = 0,
                            AppId = new Guid("d190e2a3-b0bf-4d36-b668-226f6d8db1ac"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 488, DateTimeKind.Local).AddTicks(7910),
                            ConcurrencyStamp = "7c9e6302-3ad1-4683-a173-3414c5e5b247",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA4p33z/b2GkHfhg0uO8wO/qNhDuQSZ8H4Ga38rg/28es3v9ZnnBSIDq2avdysMoNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57a4e088-f880-46bc-8b3d-0e647ad9df53",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("8afd795d-7070-4207-91b5-d7a380731182")
                        },
                        new
                        {
                            Id = new Guid("d7fa9658-914f-49fa-aa7a-180cf7fd4469"),
                            AccessFailedCount = 0,
                            AppId = new Guid("48378a02-2792-444f-877c-082a1c29a7ab"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 525, DateTimeKind.Local).AddTicks(9980),
                            ConcurrencyStamp = "763440ef-778c-4742-9f2c-1fe86221acf5",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAoQu4x60R9GVzUv5YBA9wwEnU2Q3aBQhwjr47/vyYubt3+4XuiGntjBMmhe7nRQtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2aa1c11-6c08-420b-9134-55040c86ac5d",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("e5c91ab8-d265-4ac9-8d3e-85a7f0accf08")
                        },
                        new
                        {
                            Id = new Guid("3ec9308c-a947-4e12-b917-1eb212021dbf"),
                            AccessFailedCount = 0,
                            AppId = new Guid("bed45ca4-b953-407a-8a30-af305af19b47"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 563, DateTimeKind.Local).AddTicks(3780),
                            ConcurrencyStamp = "087f35a3-e355-4bfe-8663-4a69e5940f71",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFbNPT1zDg4SlE49WYwBwfnhC6VcUbY3Rm8seLlfYSlIw5ZovdUc0GTcnemghe8GEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b03b6b78-c149-4831-b3d1-44e7ec65c8c1",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("a39d469d-40e4-4a90-bb77-5db4112c830e")
                        },
                        new
                        {
                            Id = new Guid("cf5cee16-e33b-4af9-a79c-0c5b20cf9696"),
                            AccessFailedCount = 0,
                            AppId = new Guid("570037d8-39e9-4b51-83fe-0483253d9945"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 600, DateTimeKind.Local).AddTicks(7110),
                            ConcurrencyStamp = "487c50d0-1e0a-4955-84ab-b034eca0aa61",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBkFixRSE0ZdNTetUDjvW1oehi/pDy+g7VfYdHNuKScp3fl2DpA25wqUjbLHDuJggw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e88dd725-537f-47bf-81d3-4d5e92d5f407",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("d1c05375-ec8a-447f-be48-2b1dbc24517e")
                        },
                        new
                        {
                            Id = new Guid("79434be7-ca25-46e5-91fd-ccc52bb88a5b"),
                            AccessFailedCount = 0,
                            AppId = new Guid("4c559833-ccc1-4a1d-93f3-cbb5130de84c"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 637, DateTimeKind.Local).AddTicks(6480),
                            ConcurrencyStamp = "eaec447c-3cc4-4d99-8fd3-fb6b4d34ae01",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7usErYMbUk9LAtCDyMVlV6xbKjwC4ZuxhoI1MSdpjRZ604cm2JWQh00gj7MoXpBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb043a07-33db-4e34-b420-ecf82f76b828",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("cfe94024-8d22-4cc2-a245-8c70651a837f")
                        },
                        new
                        {
                            Id = new Guid("d1c0e933-691b-4764-aa77-d51f471422cf"),
                            AccessFailedCount = 0,
                            AppId = new Guid("8935b5f9-de8c-40d8-b1b1-e4a18dd8ce66"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 674, DateTimeKind.Local).AddTicks(5480),
                            ConcurrencyStamp = "0ea25c49-028d-4d21-a9f4-a7c5a768b00f",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI1LTWV3j0SYpF+5Oml8pN/KO/A9LaSI33A1fkQYgnxcQrqOW/KqgFzcgX99Dy0EgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "793bb18c-5d59-439c-9743-6e3d6ed6397f",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("ea9279fe-6923-406c-bc5e-4bcc33e3585d")
                        },
                        new
                        {
                            Id = new Guid("bccc53a4-ce1b-46cb-a86b-cc558f07f699"),
                            AccessFailedCount = 0,
                            AppId = new Guid("2953b280-618c-491b-9b5a-247ede5b9205"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 711, DateTimeKind.Local).AddTicks(6940),
                            ConcurrencyStamp = "af9aa9e7-bd17-4f6e-b112-c64b2af42c17",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAq6eAe3ImpM38QBD6J7TMbJG7vLrYcgV6xdSqkD3Cwl+vINDt7yhgWjqSqVFCgq0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1175cbd7-1cce-41bf-984d-6bbf097f24a7",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("53b8ebf7-0cff-4b13-81de-5929d717b7f7")
                        },
                        new
                        {
                            Id = new Guid("09f1c2b8-20cf-4a65-b28f-088aaa54acdd"),
                            AccessFailedCount = 0,
                            AppId = new Guid("3c5b10c9-f2ea-4fe4-8a00-c496c902127b"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 748, DateTimeKind.Local).AddTicks(750),
                            ConcurrencyStamp = "1d2b4c24-57bd-47d8-b576-b67590c4ce86",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHx7KNPutNvdUDt4Er5yqssdEWPMpQOAkZtYtfyZxAvdPxikRqHIlxwo1dnMlz1Y9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21cde320-e6ec-4182-83bc-182a5e152128",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("9ee18f2d-773d-4b04-a971-35737a7834d2")
                        },
                        new
                        {
                            Id = new Guid("afd51e85-d30a-47df-a125-535887f7acab"),
                            AccessFailedCount = 0,
                            AppId = new Guid("717c4441-5248-46ae-b2db-a85f907f4304"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 784, DateTimeKind.Local).AddTicks(4280),
                            ConcurrencyStamp = "12bbe7ef-0e57-4ea1-8651-dc25f485be3e",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGOUWa2T0/H1zOeF9aOXfn9omCDy4an0L56tFFfdYvnmg1dkvIPpraZs8g5XOhQDCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36325c5d-a710-49ba-b7b7-521e4e372745",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("3065f136-74b1-4878-bc2d-f58f4ced3fdd")
                        },
                        new
                        {
                            Id = new Guid("02e6027c-af79-4d89-ad82-51fd24c666cb"),
                            AccessFailedCount = 0,
                            AppId = new Guid("3532e3da-36e8-44c8-b0ba-6812a2399668"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 821, DateTimeKind.Local).AddTicks(90),
                            ConcurrencyStamp = "a927bbb6-fc02-4127-b471-428cac8e07dd",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI5K8OiTZWojDUs3jNTcqE1kvX7ITExeA5FL2mI3KmGmPd9OqNPxiZ4aiMM4OrJA8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6ff5c5e-1b3e-4b70-a483-62351dd74c73",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("04c4a115-c519-4d5f-bf1d-0d05edaad1fa")
                        },
                        new
                        {
                            Id = new Guid("e2e853ce-28be-472a-9bb3-e134387475ed"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e2e853ce-28be-472a-9bb3-e134387475ed"),
                            BirthDate = new DateTime(2024, 12, 11, 14, 56, 30, 857, DateTimeKind.Local).AddTicks(9340),
                            ConcurrencyStamp = "ce645da7-f05a-442c-ae2e-72b921f744d4",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIrYpHmKaXCGrbAOW4lgzF+fuVLobI+5Awc/xyAlWx5mRJqEs5iywyEtzmzj/GxgBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdef186e-d319-4936-ac1e-9ed6400200a8",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("e2e853ce-28be-472a-9bb3-e134387475ed")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 40,
                            EndDate = new DateTime(2024, 12, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            Name = "IT Kariera",
                            StartDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\""
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\""
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sveti Kliment Ohridski 8, Sofia, Bulgaria",
                            Description = "The Technical University of Sofia is Bulgaria's largest and foremost academic establishment for higher engineering education.",
                            LogoUrl = "https://scontent.fsof1-1.fna.fbcdn.net/v/t39.30808-6/453179855_1108969364009343_5412650960044976974_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=qPhfwrpLKZUQ7kNvgGHjtnI&_nc_zt=23&_nc_ht=scontent.fsof1-1.fna&_nc_gid=A1xPbdI_kb_P2-V2ZeYF9Ij&oh=00_AYCD4-wxXkM0nUjRh1A3Z58xa9vtxRdQAf4fh6OnOsLa_g&oe=675A5DED",
                            Name = "Technical University of Sofia"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");

                    b.HasData(
                        new
                        {
                            SchoolId = 1,
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d09aa447-0f1b-4474-b503-252af834f91c"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("0afc693d-f519-47e1-9019-8cbc9c2f99e4")
                        },
                        new
                        {
                            Id = new Guid("e6f8df2b-8bd6-4036-8beb-d0a2bb0e45f2"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("258e084a-3f9e-450a-bae8-68de4a874efe")
                        },
                        new
                        {
                            Id = new Guid("d190e2a3-b0bf-4d36-b668-226f6d8db1ac"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("8afd795d-7070-4207-91b5-d7a380731182")
                        },
                        new
                        {
                            Id = new Guid("48378a02-2792-444f-877c-082a1c29a7ab"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("e5c91ab8-d265-4ac9-8d3e-85a7f0accf08")
                        },
                        new
                        {
                            Id = new Guid("bed45ca4-b953-407a-8a30-af305af19b47"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("a39d469d-40e4-4a90-bb77-5db4112c830e")
                        },
                        new
                        {
                            Id = new Guid("570037d8-39e9-4b51-83fe-0483253d9945"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("d1c05375-ec8a-447f-be48-2b1dbc24517e")
                        },
                        new
                        {
                            Id = new Guid("bcd5e300-1df5-431c-b36b-b276fe8c59fb"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("c8da2b42-1599-40b4-ac58-c5d0795ba964")
                        },
                        new
                        {
                            Id = new Guid("800c936a-c61d-4908-b983-9653a7e1b474"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("d77fe4d0-1e78-4fec-bf84-435f20e49fdf")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c559833-ccc1-4a1d-93f3-cbb5130de84c"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("cfe94024-8d22-4cc2-a245-8c70651a837f")
                        },
                        new
                        {
                            Id = new Guid("8935b5f9-de8c-40d8-b1b1-e4a18dd8ce66"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("ea9279fe-6923-406c-bc5e-4bcc33e3585d")
                        },
                        new
                        {
                            Id = new Guid("2953b280-618c-491b-9b5a-247ede5b9205"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("53b8ebf7-0cff-4b13-81de-5929d717b7f7")
                        },
                        new
                        {
                            Id = new Guid("3c5b10c9-f2ea-4fe4-8a00-c496c902127b"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("9ee18f2d-773d-4b04-a971-35737a7834d2")
                        },
                        new
                        {
                            Id = new Guid("717c4441-5248-46ae-b2db-a85f907f4304"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("3065f136-74b1-4878-bc2d-f58f4ced3fdd")
                        },
                        new
                        {
                            Id = new Guid("3532e3da-36e8-44c8-b0ba-6812a2399668"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("04c4a115-c519-4d5f-bf1d-0d05edaad1fa")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("4c559833-ccc1-4a1d-93f3-cbb5130de84c"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("4c559833-ccc1-4a1d-93f3-cbb5130de84c"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("8935b5f9-de8c-40d8-b1b1-e4a18dd8ce66"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("8935b5f9-de8c-40d8-b1b1-e4a18dd8ce66"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("3c5b10c9-f2ea-4fe4-8a00-c496c902127b"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("2953b280-618c-491b-9b5a-247ede5b9205"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("2953b280-618c-491b-9b5a-247ede5b9205"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("2953b280-618c-491b-9b5a-247ede5b9205"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("717c4441-5248-46ae-b2db-a85f907f4304"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("3532e3da-36e8-44c8-b0ba-6812a2399668"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
