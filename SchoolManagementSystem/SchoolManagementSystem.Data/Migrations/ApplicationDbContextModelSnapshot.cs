// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("953a2f8f-536a-42b4-a2fc-a75836d187d9"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("cc685e9d-f29e-415b-9620-aac09bafc3f9"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("77d96249-67ff-4667-9d54-75487978d2d4"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a1103813-6533-4f6b-9226-20fba6c93318"),
                            RoleId = new Guid("953a2f8f-536a-42b4-a2fc-a75836d187d9")
                        },
                        new
                        {
                            UserId = new Guid("c6303d6b-1b5d-47b8-ac36-b28c9363e2e4"),
                            RoleId = new Guid("953a2f8f-536a-42b4-a2fc-a75836d187d9")
                        },
                        new
                        {
                            UserId = new Guid("4a26d76f-81b7-4082-8f3e-178b7c3a3025"),
                            RoleId = new Guid("953a2f8f-536a-42b4-a2fc-a75836d187d9")
                        },
                        new
                        {
                            UserId = new Guid("3dd3ef79-eaea-4aa0-a571-e47e87fd5029"),
                            RoleId = new Guid("953a2f8f-536a-42b4-a2fc-a75836d187d9")
                        },
                        new
                        {
                            UserId = new Guid("aa5c635d-2f0a-4840-9ba4-401e5e682d7d"),
                            RoleId = new Guid("953a2f8f-536a-42b4-a2fc-a75836d187d9")
                        },
                        new
                        {
                            UserId = new Guid("b871cd1b-c4e2-4725-8a21-abbc1d4c305d"),
                            RoleId = new Guid("953a2f8f-536a-42b4-a2fc-a75836d187d9")
                        },
                        new
                        {
                            UserId = new Guid("2fb904be-10b0-4c3b-a926-fb7ce5e1f81d"),
                            RoleId = new Guid("cc685e9d-f29e-415b-9620-aac09bafc3f9")
                        },
                        new
                        {
                            UserId = new Guid("9f5ac8dd-e7ab-405b-9b9d-5d5c5fd9671c"),
                            RoleId = new Guid("cc685e9d-f29e-415b-9620-aac09bafc3f9")
                        },
                        new
                        {
                            UserId = new Guid("719ecc8f-c52c-4cb3-bdbb-81a204c78844"),
                            RoleId = new Guid("cc685e9d-f29e-415b-9620-aac09bafc3f9")
                        },
                        new
                        {
                            UserId = new Guid("2f25395d-8c7f-4737-9e4c-d163bb3ccfc8"),
                            RoleId = new Guid("cc685e9d-f29e-415b-9620-aac09bafc3f9")
                        },
                        new
                        {
                            UserId = new Guid("e5f406ab-ad3d-450b-b6be-5c9e0a0c1f5c"),
                            RoleId = new Guid("cc685e9d-f29e-415b-9620-aac09bafc3f9")
                        },
                        new
                        {
                            UserId = new Guid("b5e5fd1a-a3ff-487a-a3a6-a11b03a3cf5b"),
                            RoleId = new Guid("cc685e9d-f29e-415b-9620-aac09bafc3f9")
                        },
                        new
                        {
                            UserId = new Guid("c78a8c24-0225-45da-82ff-0462e92fe43d"),
                            RoleId = new Guid("77d96249-67ff-4667-9d54-75487978d2d4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1103813-6533-4f6b-9226-20fba6c93318"),
                            AccessFailedCount = 0,
                            AppId = new Guid("983cb0fe-f890-4974-a93f-5b009a0490bc"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 655, DateTimeKind.Local).AddTicks(6230),
                            ConcurrencyStamp = "8edafb8a-6ce3-47db-827f-289fea7d8acc",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsYJJvRyZRefg4MwNZ3NxW1qAPkpV+SSg+bQ78bcJEFD2VFjfNkQi0PEx6uw+Hm/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fda3bd35-e129-4b3e-9322-41f3a7abc2b0",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("52f4a5b6-a496-44b7-b584-bfbc22b45bdd")
                        },
                        new
                        {
                            Id = new Guid("c6303d6b-1b5d-47b8-ac36-b28c9363e2e4"),
                            AccessFailedCount = 0,
                            AppId = new Guid("b5d9e4dd-8254-47ab-b422-62d79dc084e9"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 692, DateTimeKind.Local).AddTicks(4530),
                            ConcurrencyStamp = "ef57a50f-d635-4e29-ace3-b4ecd6f315f2",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPvssRrSRndIFZV+kD0lRkQU/Y8GIjykdGg3+/pB+cJQ7jACN6TLounhFoAr6x02YQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f28b0a5-d1b1-4977-8294-ca55e7e8d146",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("ee83a516-0fc4-4bb6-a97e-84c9a0e033b1")
                        },
                        new
                        {
                            Id = new Guid("4a26d76f-81b7-4082-8f3e-178b7c3a3025"),
                            AccessFailedCount = 0,
                            AppId = new Guid("7d9c7f61-c5fe-4b6b-a193-9287e036572f"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 729, DateTimeKind.Local).AddTicks(6940),
                            ConcurrencyStamp = "12e85c19-4a3c-4401-8740-0f8af487ec72",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEpMaz6h8839LYKE9z1s5ZWyKOsliVhIKeh6uviSZpdS0OH0akjmueSvHt06fVS3xQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "62989f85-2939-4add-b1d4-cfd11d28d3bc",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("10d4b716-30e7-40b9-aa01-44625365ce19")
                        },
                        new
                        {
                            Id = new Guid("3dd3ef79-eaea-4aa0-a571-e47e87fd5029"),
                            AccessFailedCount = 0,
                            AppId = new Guid("105285af-3bb3-4256-b615-99bcfec6a72b"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 767, DateTimeKind.Local).AddTicks(9650),
                            ConcurrencyStamp = "cd121cb2-fb50-4918-a8c5-806634417d0a",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE9GTtdaKvrQRhcB15Yg5iP7bLdrH6VlaOJgJGjsM+bbjU8behyEpSpfcMF85NsZUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ec35820-431c-495d-89e9-ca3bf7c1e1f3",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("de8fc69b-4306-4900-8c89-0db327d1b65d")
                        },
                        new
                        {
                            Id = new Guid("aa5c635d-2f0a-4840-9ba4-401e5e682d7d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("aa51a218-c71e-41d5-9eed-08dc9c6b7cb5"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 804, DateTimeKind.Local).AddTicks(9820),
                            ConcurrencyStamp = "1dc69b22-67f3-4067-aedd-04299735aedc",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGAF8yQjZ17g9WDmFbRKd1uEsyu3a517Ju0eDyW0wJ4On5XxoL1OTOVPmoRE1W75vA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77e9b654-3787-42d0-9fbd-37c9042c9d7c",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("80bb9df5-afc3-47cf-88fd-78b4342b1b89")
                        },
                        new
                        {
                            Id = new Guid("b871cd1b-c4e2-4725-8a21-abbc1d4c305d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("52fd6e39-4adf-4a6c-a236-6f686ae0a769"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 842, DateTimeKind.Local).AddTicks(9110),
                            ConcurrencyStamp = "17bb7666-8e05-43d7-ac60-571c1b28fe56",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGo64IS4D+SxtXjJFm6eChqTzyQ+V9r8lsp3SILm20RrZhGR8YO+1dQr3MAfKKGgUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd4bf850-910e-4222-b0da-19c8a660ae91",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("9f9e330a-81e1-4ef4-a238-ac369940c8c3")
                        },
                        new
                        {
                            Id = new Guid("2fb904be-10b0-4c3b-a926-fb7ce5e1f81d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("89320008-9462-4220-9aa5-bff33d4fddf5"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 880, DateTimeKind.Local).AddTicks(1380),
                            ConcurrencyStamp = "526583ae-a231-42bb-abb9-33d42085dbd2",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBjNYBjxIRR3JKBvCgVkA+D+yxbmkGurdUD1b8P2mJGd2TTxzptyko/i9yX3/+ISZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ba6b634-75fd-48ec-af95-a42d4de7ae03",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("1b57975b-6361-4038-aeaf-08403b518b45")
                        },
                        new
                        {
                            Id = new Guid("9f5ac8dd-e7ab-405b-9b9d-5d5c5fd9671c"),
                            AccessFailedCount = 0,
                            AppId = new Guid("80a24610-0bae-400c-8225-d9d8636d7d12"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 917, DateTimeKind.Local).AddTicks(8510),
                            ConcurrencyStamp = "dfa74809-09d4-4511-b818-13006d39be27",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBZKsjgvyAuTXVqTg5LN/Vuue7iru+IFMDbgWjYYVT1oh1wMdESQAmU3+MWV6w9nOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d35f104c-56d3-48f9-961f-87236164229e",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("6435862d-9168-4e91-846e-821f00a1628a")
                        },
                        new
                        {
                            Id = new Guid("719ecc8f-c52c-4cb3-bdbb-81a204c78844"),
                            AccessFailedCount = 0,
                            AppId = new Guid("8afc42f4-b9ee-429a-9275-e4abceea0977"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 955, DateTimeKind.Local).AddTicks(4230),
                            ConcurrencyStamp = "c390e8af-6650-4c8a-a786-330841088165",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELMyCav2w1yJr4fJ5JonYEFf97bPg3hy8kDGMfxjwCp00R678wSevZ58Tp0vfKo12w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d587a812-7c24-4fb0-a1bb-681d56c2a0e8",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("856454cd-eaf3-4764-8495-cc2d3c105230")
                        },
                        new
                        {
                            Id = new Guid("2f25395d-8c7f-4737-9e4c-d163bb3ccfc8"),
                            AccessFailedCount = 0,
                            AppId = new Guid("556c352a-8ad8-4f8e-ad9a-028559a0e3bd"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 12, 992, DateTimeKind.Local).AddTicks(6390),
                            ConcurrencyStamp = "2021fffa-136d-4fcc-88d5-8570672f3776",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBVgiPIrAqbfrK0rJcuY0nkWlkZTxMKjxoZcV7CN2XYO+H9yvSMIElngAI+YWqp3rA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c786d93b-5cf9-4ff1-a3df-c9916aa39ce0",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("42801f83-12c6-4a5a-8796-33f06f291611")
                        },
                        new
                        {
                            Id = new Guid("e5f406ab-ad3d-450b-b6be-5c9e0a0c1f5c"),
                            AccessFailedCount = 0,
                            AppId = new Guid("84fd6466-94f3-4321-9cec-5b759bdf920b"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 13, 29, DateTimeKind.Local).AddTicks(2840),
                            ConcurrencyStamp = "b5bd20e5-e4b1-45ff-9108-9ab44972252a",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDa7RqgxzVfA+Kwfebl8lQMaL8piG9cR5EPB99Tw8LzPiKEI/wf/BEV5K1aBCA6avA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a2b4bb6-ad20-4e41-ab0f-c91075275205",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("28f89cee-e83f-4341-bf6c-821152f1b524")
                        },
                        new
                        {
                            Id = new Guid("b5e5fd1a-a3ff-487a-a3a6-a11b03a3cf5b"),
                            AccessFailedCount = 0,
                            AppId = new Guid("a699d3e3-0538-4aa5-bbad-50f72bcc666e"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 13, 66, DateTimeKind.Local).AddTicks(1190),
                            ConcurrencyStamp = "2b11591c-8872-4f0c-8f4d-ea0a90fb8ace",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELGwLj5KOZP4oFy4nu5KXrsQ6oU6yFtcoEosk+1LMLbQAgCPdzKlgmF6lKpcd5adbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c96711e7-dc99-418d-a5db-b81cc2b04416",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("629dc3d7-be76-40f3-b151-11769fd8cd90")
                        },
                        new
                        {
                            Id = new Guid("c78a8c24-0225-45da-82ff-0462e92fe43d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("c78a8c24-0225-45da-82ff-0462e92fe43d"),
                            BirthDate = new DateTime(2024, 12, 10, 23, 7, 13, 103, DateTimeKind.Local).AddTicks(3530),
                            ConcurrencyStamp = "c6e14c1e-fc35-4534-954c-3f9cf00a2341",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN+l/askyiKbpUZIVcGQh0FQruNu2asObwlEy0OGfFY/e6fY70GPR/X7yBrBJIQm6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a55e7a5e-983b-455d-bc04-aa98fb9183bc",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("c78a8c24-0225-45da-82ff-0462e92fe43d")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\"",
                            Specialities = "[1,2,4]"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\"",
                            Specialities = "[5,6,7]"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sveti Kliment Ohridski 8, Sofia, Bulgaria",
                            Description = "The Technical University of Sofia is Bulgaria's largest and foremost academic establishment for higher engineering education.",
                            LogoUrl = "https://scontent.fsof1-1.fna.fbcdn.net/v/t39.30808-6/453179855_1108969364009343_5412650960044976974_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=qPhfwrpLKZUQ7kNvgGHjtnI&_nc_zt=23&_nc_ht=scontent.fsof1-1.fna&_nc_gid=A1xPbdI_kb_P2-V2ZeYF9Ij&oh=00_AYCD4-wxXkM0nUjRh1A3Z58xa9vtxRdQAf4fh6OnOsLa_g&oe=675A5DED",
                            Name = "Technical University of Sofia",
                            Specialities = "[2,1]"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("983cb0fe-f890-4974-a93f-5b009a0490bc"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("52f4a5b6-a496-44b7-b584-bfbc22b45bdd")
                        },
                        new
                        {
                            Id = new Guid("b5d9e4dd-8254-47ab-b422-62d79dc084e9"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("ee83a516-0fc4-4bb6-a97e-84c9a0e033b1")
                        },
                        new
                        {
                            Id = new Guid("7d9c7f61-c5fe-4b6b-a193-9287e036572f"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("10d4b716-30e7-40b9-aa01-44625365ce19")
                        },
                        new
                        {
                            Id = new Guid("105285af-3bb3-4256-b615-99bcfec6a72b"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("de8fc69b-4306-4900-8c89-0db327d1b65d")
                        },
                        new
                        {
                            Id = new Guid("aa51a218-c71e-41d5-9eed-08dc9c6b7cb5"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("80bb9df5-afc3-47cf-88fd-78b4342b1b89")
                        },
                        new
                        {
                            Id = new Guid("52fd6e39-4adf-4a6c-a236-6f686ae0a769"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("9f9e330a-81e1-4ef4-a238-ac369940c8c3")
                        },
                        new
                        {
                            Id = new Guid("c0168b38-bc23-49bc-983a-c3f2c746e22d"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("b78c8a5d-1282-45d9-96d6-3a34a92da0bd")
                        },
                        new
                        {
                            Id = new Guid("b8db297b-d9f7-414b-9827-18b2fafdbbac"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("83a7d1c6-ae60-4a64-a43d-b7cafe6b5722")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89320008-9462-4220-9aa5-bff33d4fddf5"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("1b57975b-6361-4038-aeaf-08403b518b45")
                        },
                        new
                        {
                            Id = new Guid("80a24610-0bae-400c-8225-d9d8636d7d12"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("6435862d-9168-4e91-846e-821f00a1628a")
                        },
                        new
                        {
                            Id = new Guid("8afc42f4-b9ee-429a-9275-e4abceea0977"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("856454cd-eaf3-4764-8495-cc2d3c105230")
                        },
                        new
                        {
                            Id = new Guid("556c352a-8ad8-4f8e-ad9a-028559a0e3bd"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("42801f83-12c6-4a5a-8796-33f06f291611")
                        },
                        new
                        {
                            Id = new Guid("84fd6466-94f3-4321-9cec-5b759bdf920b"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("28f89cee-e83f-4341-bf6c-821152f1b524")
                        },
                        new
                        {
                            Id = new Guid("a699d3e3-0538-4aa5-bbad-50f72bcc666e"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("629dc3d7-be76-40f3-b151-11769fd8cd90")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("89320008-9462-4220-9aa5-bff33d4fddf5"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("89320008-9462-4220-9aa5-bff33d4fddf5"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("80a24610-0bae-400c-8225-d9d8636d7d12"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("80a24610-0bae-400c-8225-d9d8636d7d12"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("556c352a-8ad8-4f8e-ad9a-028559a0e3bd"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("8afc42f4-b9ee-429a-9275-e4abceea0977"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("8afc42f4-b9ee-429a-9275-e4abceea0977"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("8afc42f4-b9ee-429a-9275-e4abceea0977"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("84fd6466-94f3-4321-9cec-5b759bdf920b"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("a699d3e3-0538-4aa5-bbad-50f72bcc666e"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
