// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241211021922_EditSchool")]
    partial class EditSchool
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3057980-ee1f-4ee2-8af4-21d173ce9750"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("a4bfa4e1-50c8-434f-83a6-936bbf6d6e13"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("25588845-b7a8-45c4-9138-c58f227ffe0c"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("65dc3fb2-67be-433b-9783-785f9c19e057"),
                            RoleId = new Guid("f3057980-ee1f-4ee2-8af4-21d173ce9750")
                        },
                        new
                        {
                            UserId = new Guid("7ef4fa76-49d0-4afc-ba07-a4df87fac40c"),
                            RoleId = new Guid("f3057980-ee1f-4ee2-8af4-21d173ce9750")
                        },
                        new
                        {
                            UserId = new Guid("e64c76d8-54b6-4611-adfa-83113520151e"),
                            RoleId = new Guid("f3057980-ee1f-4ee2-8af4-21d173ce9750")
                        },
                        new
                        {
                            UserId = new Guid("1a2f99ac-e8d4-4c36-8127-37c77a36a44b"),
                            RoleId = new Guid("f3057980-ee1f-4ee2-8af4-21d173ce9750")
                        },
                        new
                        {
                            UserId = new Guid("a7a03a4b-6c2d-4741-9708-7b7821a26cde"),
                            RoleId = new Guid("f3057980-ee1f-4ee2-8af4-21d173ce9750")
                        },
                        new
                        {
                            UserId = new Guid("d5d2153b-50e1-4659-b827-29589bd6d13b"),
                            RoleId = new Guid("f3057980-ee1f-4ee2-8af4-21d173ce9750")
                        },
                        new
                        {
                            UserId = new Guid("713c7d6d-ecf1-419e-9fc5-4ca8900eb7fe"),
                            RoleId = new Guid("a4bfa4e1-50c8-434f-83a6-936bbf6d6e13")
                        },
                        new
                        {
                            UserId = new Guid("acd17095-d0eb-4946-80e8-6c8bf5afa66d"),
                            RoleId = new Guid("a4bfa4e1-50c8-434f-83a6-936bbf6d6e13")
                        },
                        new
                        {
                            UserId = new Guid("a00584c2-c7c3-48d1-b0d5-a95905655f67"),
                            RoleId = new Guid("a4bfa4e1-50c8-434f-83a6-936bbf6d6e13")
                        },
                        new
                        {
                            UserId = new Guid("7ac7ab14-6b57-48ed-b797-0dbfc65341c9"),
                            RoleId = new Guid("a4bfa4e1-50c8-434f-83a6-936bbf6d6e13")
                        },
                        new
                        {
                            UserId = new Guid("e36fcee5-3a7c-4360-be50-5be9c6c4e3fa"),
                            RoleId = new Guid("a4bfa4e1-50c8-434f-83a6-936bbf6d6e13")
                        },
                        new
                        {
                            UserId = new Guid("fb962c0e-bc33-45e1-a2ac-d455b3315b81"),
                            RoleId = new Guid("a4bfa4e1-50c8-434f-83a6-936bbf6d6e13")
                        },
                        new
                        {
                            UserId = new Guid("640a5fd7-0f9c-434a-be35-32690a81b633"),
                            RoleId = new Guid("25588845-b7a8-45c4-9138-c58f227ffe0c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("65dc3fb2-67be-433b-9783-785f9c19e057"),
                            AccessFailedCount = 0,
                            AppId = new Guid("0809b88d-ac5d-4670-8a0d-4051948b73d2"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 137, DateTimeKind.Local).AddTicks(7050),
                            ConcurrencyStamp = "bbde79b8-4abf-49ac-8d8f-ac1af692a6e5",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyGRjHwmdlYu35qaBBdb9mpiGus7fFaL8FyGEoPsSmbSa5XGITo+3n+aDiqlvqw+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e8df240-86ba-413c-9296-2efa18da78d0",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("41804caf-54c6-463c-8587-e0edffc016ff")
                        },
                        new
                        {
                            Id = new Guid("7ef4fa76-49d0-4afc-ba07-a4df87fac40c"),
                            AccessFailedCount = 0,
                            AppId = new Guid("f6afb974-d1e3-4ccc-9c90-3bbd36e7b8c1"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 174, DateTimeKind.Local).AddTicks(6080),
                            ConcurrencyStamp = "c83199fc-51bd-438c-b70b-79a4d74d32ec",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFKaJm+Rt7TjOtY0V4o41YGI1HZ/VXTqT/SOzzFZ0pxVazroZbQN5bSjXUt3JUv9Qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "826137b2-872e-4758-b97c-c14ead2d3999",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("97eabedd-dc15-4422-99d2-84a57a5dd3b7")
                        },
                        new
                        {
                            Id = new Guid("e64c76d8-54b6-4611-adfa-83113520151e"),
                            AccessFailedCount = 0,
                            AppId = new Guid("65a0025e-7e5d-4ddd-b93b-8985a6b429f8"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 211, DateTimeKind.Local).AddTicks(830),
                            ConcurrencyStamp = "7d54047c-ad6a-48ea-8211-e09eb5229296",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE890ciELrPtuepgOBc3bYwsIUOidAmR9fHNfHV0kn6Sw6/wiSY4MLJbXxhN/5gPkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "559acc6e-fd5a-4026-9f5b-0243d8206a30",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("9b6479d1-585e-4d95-856b-5dd9a64605bb")
                        },
                        new
                        {
                            Id = new Guid("1a2f99ac-e8d4-4c36-8127-37c77a36a44b"),
                            AccessFailedCount = 0,
                            AppId = new Guid("c07a087f-3096-42c8-82d0-baef54022734"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 247, DateTimeKind.Local).AddTicks(8840),
                            ConcurrencyStamp = "b8f34477-7fd6-44ea-ae5f-c45182fe04c1",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNMiNYd2EbWJ9yZTncasQm6HhXiitzTjCqNgEykvUExElv14bt1VpteLGLIdVb4Og==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "232aee69-078b-4297-bfda-b9b0f8743b3e",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("c09f2c07-5547-4c6a-a490-05316421c22e")
                        },
                        new
                        {
                            Id = new Guid("a7a03a4b-6c2d-4741-9708-7b7821a26cde"),
                            AccessFailedCount = 0,
                            AppId = new Guid("cffa85f4-6b49-4a6c-a1f1-b70efb99c9d4"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 284, DateTimeKind.Local).AddTicks(7780),
                            ConcurrencyStamp = "d1e8b41b-5eeb-4baf-8830-f629b0ce48ad",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFT0zt9ZxCPJh2ZtZjpawRVHB8J7Led5zUtzZVBL5Fk1Ne4jA8ft9+hBnCSMKpxAfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68fd44ed-c47a-4029-bf32-73e8229b3b16",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("c36b17ff-1f8c-44d8-b57b-4ef92a605562")
                        },
                        new
                        {
                            Id = new Guid("d5d2153b-50e1-4659-b827-29589bd6d13b"),
                            AccessFailedCount = 0,
                            AppId = new Guid("6ed8249a-9b39-41c0-b974-538bb520ee54"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 321, DateTimeKind.Local).AddTicks(6830),
                            ConcurrencyStamp = "7ec14bca-ef7f-4152-ae52-6b43f15d1dc6",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAW7LMKOqWaOpr7aztdZDxvKFQtXh+IUy9cpXtu4IdHHAfQQu1w0r+Zvv1fPVV9+yg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6bfa1afe-7d16-44ee-8d08-5c0ed4bfaaf3",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("efbfac98-013e-42c0-bd51-87c3649fe232")
                        },
                        new
                        {
                            Id = new Guid("713c7d6d-ecf1-419e-9fc5-4ca8900eb7fe"),
                            AccessFailedCount = 0,
                            AppId = new Guid("2eca3b86-60f1-41b5-8be3-8e99d4066c2a"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 359, DateTimeKind.Local).AddTicks(2950),
                            ConcurrencyStamp = "21fe8fef-4793-4653-9a20-5df58ae29206",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGfdB9EOiewCfOFvrdoPd1+bttH8Wdy3/wHlVJ5tdt+16rJAT6RlfWYoxCiit+m9zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "754c9e65-ae79-4966-8a7c-ef8b2891baf4",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("95acc98a-1171-430a-92e2-f86821946722")
                        },
                        new
                        {
                            Id = new Guid("acd17095-d0eb-4946-80e8-6c8bf5afa66d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("c27a5973-2cad-4f29-8320-4bcaed969977"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 396, DateTimeKind.Local).AddTicks(5130),
                            ConcurrencyStamp = "72bf94ac-31c7-4dd8-b620-c249dd0ae902",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAg6b8A+nQFLI3ZYN5763zcos46+X4rB1YiYNJluevd7ZL/XfwAttpuPL29KioSj2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5662a555-ae81-46a5-9e39-011962b26db0",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("782c64bc-8a48-4f9f-b59d-4e2f9f525421")
                        },
                        new
                        {
                            Id = new Guid("a00584c2-c7c3-48d1-b0d5-a95905655f67"),
                            AccessFailedCount = 0,
                            AppId = new Guid("8c720aa4-7720-4273-9c9b-ecaaae3c2699"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 433, DateTimeKind.Local).AddTicks(7940),
                            ConcurrencyStamp = "8b7bb45e-6271-4196-be43-25b0164bda09",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAMAtayPJu6ZstlvfBC5aKUoydYgLnKaL8V2spEtx8vqX9lM1CIHCdmnsucJNm0QvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d44233dd-93d1-4bb2-8de4-f6b615e2f27f",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("3ea97cd0-8d3c-4eae-8f03-7511e32d598f")
                        },
                        new
                        {
                            Id = new Guid("7ac7ab14-6b57-48ed-b797-0dbfc65341c9"),
                            AccessFailedCount = 0,
                            AppId = new Guid("0d3bb376-6b33-4a10-a275-454123924ba1"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 470, DateTimeKind.Local).AddTicks(5840),
                            ConcurrencyStamp = "1031692d-63b4-4507-85fe-d9a95e03cac4",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED8G/YS1zGRyiRKLPuxRrJxVYUzX9C6U/KfAsWXw5TuBYMPavxJO8fddT06Qwip3PA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c9e6cad-3661-48bc-917a-7eff3c67f1c1",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("55492d91-6039-4227-b0c5-c4a42a25756d")
                        },
                        new
                        {
                            Id = new Guid("e36fcee5-3a7c-4360-be50-5be9c6c4e3fa"),
                            AccessFailedCount = 0,
                            AppId = new Guid("00a5f68b-28c8-48d9-a6a9-985967994b7a"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 506, DateTimeKind.Local).AddTicks(6630),
                            ConcurrencyStamp = "14bd30f0-229a-4c74-82fc-2ecee4bad342",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO8jYte1g2Lgq2ZkSD3+hBqBt8T58qoMwBnoL1kL8oOlxULd635PEKlsHJeToPls7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8febb2d8-13a9-41f8-8be0-a65e4a2087e5",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("c6caff99-189e-45db-9886-6b365d050f4c")
                        },
                        new
                        {
                            Id = new Guid("fb962c0e-bc33-45e1-a2ac-d455b3315b81"),
                            AccessFailedCount = 0,
                            AppId = new Guid("17de384b-293a-428d-948b-b19b4a2fb48c"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 543, DateTimeKind.Local).AddTicks(7980),
                            ConcurrencyStamp = "082656f9-69d5-4a67-816f-9e1f32b9b1cf",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVSM7hL3Q28fPogFNVCSab7yu7YnwyBJsZaBymP62Yfi1BLVPE9jqLIQ3GRTJM6DQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a237ad5-3e7d-464d-affe-7e1763954ad0",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("30827f3b-898f-4d95-858b-07bc41948eff")
                        },
                        new
                        {
                            Id = new Guid("640a5fd7-0f9c-434a-be35-32690a81b633"),
                            AccessFailedCount = 0,
                            AppId = new Guid("640a5fd7-0f9c-434a-be35-32690a81b633"),
                            BirthDate = new DateTime(2024, 12, 11, 4, 19, 21, 580, DateTimeKind.Local).AddTicks(6630),
                            ConcurrencyStamp = "f4a6f275-4e6d-4d44-97d0-426b2d120629",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJAmlzmPh9+oR1jzLsBZAfdz6Byk5LxhfSiwi74DXbTFzk6W81di2JDEkaF6gP3EHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8da4052-2390-4f0d-aa01-688f38383614",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("640a5fd7-0f9c-434a-be35-32690a81b633")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\"",
                            Specialities = "[1,2,4]"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\"",
                            Specialities = "[5,6,7]"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sveti Kliment Ohridski 8, Sofia, Bulgaria",
                            Description = "The Technical University of Sofia is Bulgaria's largest and foremost academic establishment for higher engineering education.",
                            LogoUrl = "https://scontent.fsof1-1.fna.fbcdn.net/v/t39.30808-6/453179855_1108969364009343_5412650960044976974_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=qPhfwrpLKZUQ7kNvgGHjtnI&_nc_zt=23&_nc_ht=scontent.fsof1-1.fna&_nc_gid=A1xPbdI_kb_P2-V2ZeYF9Ij&oh=00_AYCD4-wxXkM0nUjRh1A3Z58xa9vtxRdQAf4fh6OnOsLa_g&oe=675A5DED",
                            Name = "Technical University of Sofia",
                            Specialities = "[2,1]"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0809b88d-ac5d-4670-8a0d-4051948b73d2"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("41804caf-54c6-463c-8587-e0edffc016ff")
                        },
                        new
                        {
                            Id = new Guid("f6afb974-d1e3-4ccc-9c90-3bbd36e7b8c1"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("97eabedd-dc15-4422-99d2-84a57a5dd3b7")
                        },
                        new
                        {
                            Id = new Guid("65a0025e-7e5d-4ddd-b93b-8985a6b429f8"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("9b6479d1-585e-4d95-856b-5dd9a64605bb")
                        },
                        new
                        {
                            Id = new Guid("c07a087f-3096-42c8-82d0-baef54022734"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("c09f2c07-5547-4c6a-a490-05316421c22e")
                        },
                        new
                        {
                            Id = new Guid("cffa85f4-6b49-4a6c-a1f1-b70efb99c9d4"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("c36b17ff-1f8c-44d8-b57b-4ef92a605562")
                        },
                        new
                        {
                            Id = new Guid("6ed8249a-9b39-41c0-b974-538bb520ee54"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("efbfac98-013e-42c0-bd51-87c3649fe232")
                        },
                        new
                        {
                            Id = new Guid("57545566-2482-4de7-a480-9004e931e444"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("f215006d-b6ff-496a-a40c-57feda56a960")
                        },
                        new
                        {
                            Id = new Guid("a1f5443e-e059-4a4a-b03c-8b2d77940bb5"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("323bdce5-53e5-44b5-a6bb-3a2a6fb7ea91")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2eca3b86-60f1-41b5-8be3-8e99d4066c2a"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("95acc98a-1171-430a-92e2-f86821946722")
                        },
                        new
                        {
                            Id = new Guid("c27a5973-2cad-4f29-8320-4bcaed969977"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("782c64bc-8a48-4f9f-b59d-4e2f9f525421")
                        },
                        new
                        {
                            Id = new Guid("8c720aa4-7720-4273-9c9b-ecaaae3c2699"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("3ea97cd0-8d3c-4eae-8f03-7511e32d598f")
                        },
                        new
                        {
                            Id = new Guid("0d3bb376-6b33-4a10-a275-454123924ba1"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("55492d91-6039-4227-b0c5-c4a42a25756d")
                        },
                        new
                        {
                            Id = new Guid("00a5f68b-28c8-48d9-a6a9-985967994b7a"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("c6caff99-189e-45db-9886-6b365d050f4c")
                        },
                        new
                        {
                            Id = new Guid("17de384b-293a-428d-948b-b19b4a2fb48c"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("30827f3b-898f-4d95-858b-07bc41948eff")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("2eca3b86-60f1-41b5-8be3-8e99d4066c2a"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("2eca3b86-60f1-41b5-8be3-8e99d4066c2a"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("c27a5973-2cad-4f29-8320-4bcaed969977"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("c27a5973-2cad-4f29-8320-4bcaed969977"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("0d3bb376-6b33-4a10-a275-454123924ba1"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("8c720aa4-7720-4273-9c9b-ecaaae3c2699"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("8c720aa4-7720-4273-9c9b-ecaaae3c2699"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("8c720aa4-7720-4273-9c9b-ecaaae3c2699"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("00a5f68b-28c8-48d9-a6a9-985967994b7a"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("17de384b-293a-428d-948b-b19b4a2fb48c"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
