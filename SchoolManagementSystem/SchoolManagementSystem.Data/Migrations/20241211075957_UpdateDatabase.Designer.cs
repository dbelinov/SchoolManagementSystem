// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241211075957_UpdateDatabase")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("656c1bf0-56a0-4aa0-a872-dc653b4bf5ad"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("45c6fa5c-4dcf-411c-8f90-0602c14d9631"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("25438e76-3288-4c35-b19f-f212234f960f"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7579c39d-e2b7-4818-bde0-e8fbdb576b70"),
                            RoleId = new Guid("656c1bf0-56a0-4aa0-a872-dc653b4bf5ad")
                        },
                        new
                        {
                            UserId = new Guid("00ade01c-106b-48be-b5c3-6ada25def050"),
                            RoleId = new Guid("656c1bf0-56a0-4aa0-a872-dc653b4bf5ad")
                        },
                        new
                        {
                            UserId = new Guid("2fbc5ece-e33d-4ad1-87d8-8d364b0b0e6c"),
                            RoleId = new Guid("656c1bf0-56a0-4aa0-a872-dc653b4bf5ad")
                        },
                        new
                        {
                            UserId = new Guid("234f7c1c-661c-46be-b920-fdff7e0a2c7e"),
                            RoleId = new Guid("656c1bf0-56a0-4aa0-a872-dc653b4bf5ad")
                        },
                        new
                        {
                            UserId = new Guid("c037b780-5a0c-44f0-b623-b54dccbac55b"),
                            RoleId = new Guid("656c1bf0-56a0-4aa0-a872-dc653b4bf5ad")
                        },
                        new
                        {
                            UserId = new Guid("84a262e1-3070-4e5b-9bbb-b6fbbae41d61"),
                            RoleId = new Guid("656c1bf0-56a0-4aa0-a872-dc653b4bf5ad")
                        },
                        new
                        {
                            UserId = new Guid("456bdb06-ab4d-4918-9a79-3fd81962e6f1"),
                            RoleId = new Guid("45c6fa5c-4dcf-411c-8f90-0602c14d9631")
                        },
                        new
                        {
                            UserId = new Guid("fec22ed3-ccaf-4a0e-b315-a52ab6fb74cb"),
                            RoleId = new Guid("45c6fa5c-4dcf-411c-8f90-0602c14d9631")
                        },
                        new
                        {
                            UserId = new Guid("e9dc8aa9-7bc2-4a60-9772-05d35e6fc908"),
                            RoleId = new Guid("45c6fa5c-4dcf-411c-8f90-0602c14d9631")
                        },
                        new
                        {
                            UserId = new Guid("bd2026ba-353c-48ca-9e47-677a9cd4fd66"),
                            RoleId = new Guid("45c6fa5c-4dcf-411c-8f90-0602c14d9631")
                        },
                        new
                        {
                            UserId = new Guid("d8f64b0c-a77e-4cc4-a412-165064f308d2"),
                            RoleId = new Guid("45c6fa5c-4dcf-411c-8f90-0602c14d9631")
                        },
                        new
                        {
                            UserId = new Guid("210c1a6b-0a43-41e2-9a7f-8be6666a98dd"),
                            RoleId = new Guid("45c6fa5c-4dcf-411c-8f90-0602c14d9631")
                        },
                        new
                        {
                            UserId = new Guid("180d29be-0739-4909-a0ef-ed0a2b04c89d"),
                            RoleId = new Guid("25438e76-3288-4c35-b19f-f212234f960f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7579c39d-e2b7-4818-bde0-e8fbdb576b70"),
                            AccessFailedCount = 0,
                            AppId = new Guid("4ed8d27b-0d97-4518-8580-a0dc963d34e0"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 26, DateTimeKind.Local).AddTicks(4990),
                            ConcurrencyStamp = "9c4aa8b8-4c0c-4027-bf67-d57eab09a2fe",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJLrdygYlPGn6Le8iMFlmw78Uh6SovGqLr78bZNiI/yiPZBycAF79U4kRZXHbKYAww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d47f969-3cb9-4dcf-a20b-eadeccf0a58e",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("679132e0-4871-4277-ad8b-6db85c0e6b55")
                        },
                        new
                        {
                            Id = new Guid("00ade01c-106b-48be-b5c3-6ada25def050"),
                            AccessFailedCount = 0,
                            AppId = new Guid("6b03fa77-56a5-40e4-ac6e-82b590d66af3"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 63, DateTimeKind.Local).AddTicks(2920),
                            ConcurrencyStamp = "42ec8e16-757d-4c62-a7e4-3f250e120219",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIjTY2HKEVPxMoaGSlia/ne3f9jd6J8f2P2VRv1DmgE/ZdCXarXlmvq9rXfJNhMKJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2ded37b-0730-4370-8629-a8c1f884e4c8",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("ae4a8a4f-42b4-49e6-8e82-d933e3199e6c")
                        },
                        new
                        {
                            Id = new Guid("2fbc5ece-e33d-4ad1-87d8-8d364b0b0e6c"),
                            AccessFailedCount = 0,
                            AppId = new Guid("fb530c5d-85bc-4d53-8ede-2188717f4f31"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 99, DateTimeKind.Local).AddTicks(4450),
                            ConcurrencyStamp = "20394574-6918-4d3c-b1ad-c83e519d1a4d",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKoHoA16SIyvLLaKTM1XM6wKJgckL0sc2bcVDE1WTPY2YJQL56dRWI1EECFmdRuGjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "198db139-5d0c-400f-80a8-d978d97dcaa3",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("95f29e08-0759-4ccd-aa40-5c9d41f30e24")
                        },
                        new
                        {
                            Id = new Guid("234f7c1c-661c-46be-b920-fdff7e0a2c7e"),
                            AccessFailedCount = 0,
                            AppId = new Guid("dce6e916-1c04-46c6-aa05-d289a12b8b90"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 136, DateTimeKind.Local).AddTicks(8810),
                            ConcurrencyStamp = "622157be-882c-4ac9-8952-8fab702d2741",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHflYNJQK65cHlh/Vgi5K+/AHnHR+CBAhFncQfWEnjgrWeVjVrNvLjR6gHlgZVdsEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "643531fb-9368-48f0-85a5-9cf0a10c14db",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("4d6b8b03-1859-4bd5-bdd9-beed0389e904")
                        },
                        new
                        {
                            Id = new Guid("c037b780-5a0c-44f0-b623-b54dccbac55b"),
                            AccessFailedCount = 0,
                            AppId = new Guid("a5eb78c4-3a0a-4272-9121-213012c18630"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 174, DateTimeKind.Local).AddTicks(3840),
                            ConcurrencyStamp = "ec18d609-bbc7-4dab-850d-bd3ba5e1ac64",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDtOhg3OdkkowOfNy19C9PDTLv0CBz9R7TLFO6XWZPZJu3DNafS/XAb7pQARmQUCQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0015ce39-440d-44e1-a24e-602a89088584",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("4b529d7a-8379-4049-bbef-9e2baf46a5bc")
                        },
                        new
                        {
                            Id = new Guid("84a262e1-3070-4e5b-9bbb-b6fbbae41d61"),
                            AccessFailedCount = 0,
                            AppId = new Guid("3f964b45-cb68-4b68-9e28-63d4dbe607e9"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 211, DateTimeKind.Local).AddTicks(2280),
                            ConcurrencyStamp = "21394041-335e-458d-bc3f-b04cbc591803",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHes17aQDJJlucxqJQj4WP0x108M5dIqOSNw9InODGhDrLuzR2uOFPKa75EupY2vJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d125cbcc-bb23-48dd-b2f8-f5841c897709",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("3441bd08-8514-4929-875b-7e6a135bf2ad")
                        },
                        new
                        {
                            Id = new Guid("456bdb06-ab4d-4918-9a79-3fd81962e6f1"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e184a8b4-9b1e-4501-b461-9cfe3a44e220"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 248, DateTimeKind.Local).AddTicks(3550),
                            ConcurrencyStamp = "e79d64c0-87a5-40ae-b491-f0c39e1826b9",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6TXUDkjsnyszTR7i2kohvp57h5fKjipKXySEF3tpmc+6A89s+0cyut15gjTlV3Sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6bbb4036-b0ac-40b5-96a0-1041d4345463",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("7f9ef5ba-60ff-4270-98f7-c7ed4bbf9ad2")
                        },
                        new
                        {
                            Id = new Guid("fec22ed3-ccaf-4a0e-b315-a52ab6fb74cb"),
                            AccessFailedCount = 0,
                            AppId = new Guid("af7b042a-cc0e-491d-95de-56e127b35767"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 286, DateTimeKind.Local).AddTicks(2410),
                            ConcurrencyStamp = "d7e08b9a-90a8-4d77-a433-e0a9e3add0d1",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFUN7TSnpywgoh6sQ0jyM6Gzj7jv5wdygEGsdXLqox+C86xK8iYBCq0mPPItS9ezzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7969267d-e2ca-423f-a128-492d155c934d",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("f2359895-0c63-4c2c-80cb-d95accb196b6")
                        },
                        new
                        {
                            Id = new Guid("e9dc8aa9-7bc2-4a60-9772-05d35e6fc908"),
                            AccessFailedCount = 0,
                            AppId = new Guid("7684d2b7-f307-4c4d-8fb6-c25cc81cc85d"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 324, DateTimeKind.Local).AddTicks(3680),
                            ConcurrencyStamp = "f81345df-80a2-4a48-805f-c3aed7f70757",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBLpbH3rNOfpeHzfBN3B8CEKroOeWjA7hyhsK1+tpGiqH4icAbbv5VKVAzSiQBLhhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00d29be7-957e-48bb-87e5-f01488b964f3",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("19dbce97-dc6e-4012-8dd0-3995f1310041")
                        },
                        new
                        {
                            Id = new Guid("bd2026ba-353c-48ca-9e47-677a9cd4fd66"),
                            AccessFailedCount = 0,
                            AppId = new Guid("bdc84d05-74ef-4dcd-8463-25ed3034a2f7"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 361, DateTimeKind.Local).AddTicks(2810),
                            ConcurrencyStamp = "3a25c7c4-debc-4254-be00-3a3b53626a4f",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENCGgKt3spoWgNTdkh4uc0WGYdVlOcIHeTXc8Ko3yuW61Gwt9dOt+gCXD2qT+mlBpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7348ca2d-4822-46ba-9340-472ddf0ce420",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("37a0d9fa-d033-44ea-a1c6-93fe59cb8f89")
                        },
                        new
                        {
                            Id = new Guid("d8f64b0c-a77e-4cc4-a412-165064f308d2"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e62978a1-86d7-4ff3-b293-e9864ba42671"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 398, DateTimeKind.Local).AddTicks(8550),
                            ConcurrencyStamp = "746a184e-dc19-400b-a657-e575202ee2c1",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH5DJdZI+1L8a97VZqkOEhWqA83v3xqvNYclAt86vVhWk2GJyW+bUqFNK6IxBuEvyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "703e92e2-b058-4740-a932-4f15cc3d114a",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("b7133904-8f92-4365-bf40-7414fce40419")
                        },
                        new
                        {
                            Id = new Guid("210c1a6b-0a43-41e2-9a7f-8be6666a98dd"),
                            AccessFailedCount = 0,
                            AppId = new Guid("7440f78e-9d69-4083-89b9-3b728551083c"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 437, DateTimeKind.Local).AddTicks(200),
                            ConcurrencyStamp = "fcc3a8a8-9f45-437b-bbdb-a76d3cc51c15",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDnuv83Rc7hQBMS+6DOqlswh5KPAQgqkuz7vmya8EIyh8osoKZWZ4ZuavtdwoFua5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08014328-c674-4121-a423-dab5113bcf23",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("1939f8a4-7dda-41e0-8dbf-6b82c9d6a342")
                        },
                        new
                        {
                            Id = new Guid("180d29be-0739-4909-a0ef-ed0a2b04c89d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("180d29be-0739-4909-a0ef-ed0a2b04c89d"),
                            BirthDate = new DateTime(2024, 12, 11, 9, 59, 57, 475, DateTimeKind.Local).AddTicks(910),
                            ConcurrencyStamp = "1486cb81-3f00-4896-9292-c55469077027",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEWWH7my/CMzY9tMQLxoAQ9BhzDJezSB+XRqm4J6I2CjXZWTXkaOuUYeG2ni539KIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14013f28-01b5-42d3-9b4a-fa4e0c913a35",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("180d29be-0739-4909-a0ef-ed0a2b04c89d")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\""
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\""
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sveti Kliment Ohridski 8, Sofia, Bulgaria",
                            Description = "The Technical University of Sofia is Bulgaria's largest and foremost academic establishment for higher engineering education.",
                            LogoUrl = "https://scontent.fsof1-1.fna.fbcdn.net/v/t39.30808-6/453179855_1108969364009343_5412650960044976974_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=qPhfwrpLKZUQ7kNvgGHjtnI&_nc_zt=23&_nc_ht=scontent.fsof1-1.fna&_nc_gid=A1xPbdI_kb_P2-V2ZeYF9Ij&oh=00_AYCD4-wxXkM0nUjRh1A3Z58xa9vtxRdQAf4fh6OnOsLa_g&oe=675A5DED",
                            Name = "Technical University of Sofia"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ed8d27b-0d97-4518-8580-a0dc963d34e0"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("679132e0-4871-4277-ad8b-6db85c0e6b55")
                        },
                        new
                        {
                            Id = new Guid("6b03fa77-56a5-40e4-ac6e-82b590d66af3"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("ae4a8a4f-42b4-49e6-8e82-d933e3199e6c")
                        },
                        new
                        {
                            Id = new Guid("fb530c5d-85bc-4d53-8ede-2188717f4f31"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("95f29e08-0759-4ccd-aa40-5c9d41f30e24")
                        },
                        new
                        {
                            Id = new Guid("dce6e916-1c04-46c6-aa05-d289a12b8b90"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("4d6b8b03-1859-4bd5-bdd9-beed0389e904")
                        },
                        new
                        {
                            Id = new Guid("a5eb78c4-3a0a-4272-9121-213012c18630"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("4b529d7a-8379-4049-bbef-9e2baf46a5bc")
                        },
                        new
                        {
                            Id = new Guid("3f964b45-cb68-4b68-9e28-63d4dbe607e9"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("3441bd08-8514-4929-875b-7e6a135bf2ad")
                        },
                        new
                        {
                            Id = new Guid("ec7d47f2-17ad-4a80-974b-eabaa017bdab"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("89a0beed-dde7-4158-83ef-10c989a878db")
                        },
                        new
                        {
                            Id = new Guid("3e65698a-3f51-4490-b485-2f1a6d7b70ed"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("50b5d4a3-a470-4095-8cb2-b91a0696c509")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e184a8b4-9b1e-4501-b461-9cfe3a44e220"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("7f9ef5ba-60ff-4270-98f7-c7ed4bbf9ad2")
                        },
                        new
                        {
                            Id = new Guid("af7b042a-cc0e-491d-95de-56e127b35767"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("f2359895-0c63-4c2c-80cb-d95accb196b6")
                        },
                        new
                        {
                            Id = new Guid("7684d2b7-f307-4c4d-8fb6-c25cc81cc85d"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("19dbce97-dc6e-4012-8dd0-3995f1310041")
                        },
                        new
                        {
                            Id = new Guid("bdc84d05-74ef-4dcd-8463-25ed3034a2f7"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("37a0d9fa-d033-44ea-a1c6-93fe59cb8f89")
                        },
                        new
                        {
                            Id = new Guid("e62978a1-86d7-4ff3-b293-e9864ba42671"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("b7133904-8f92-4365-bf40-7414fce40419")
                        },
                        new
                        {
                            Id = new Guid("7440f78e-9d69-4083-89b9-3b728551083c"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("1939f8a4-7dda-41e0-8dbf-6b82c9d6a342")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("e184a8b4-9b1e-4501-b461-9cfe3a44e220"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("e184a8b4-9b1e-4501-b461-9cfe3a44e220"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("af7b042a-cc0e-491d-95de-56e127b35767"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("af7b042a-cc0e-491d-95de-56e127b35767"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("bdc84d05-74ef-4dcd-8463-25ed3034a2f7"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("7684d2b7-f307-4c4d-8fb6-c25cc81cc85d"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("7684d2b7-f307-4c4d-8fb6-c25cc81cc85d"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("7684d2b7-f307-4c4d-8fb6-c25cc81cc85d"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("e62978a1-86d7-4ff3-b293-e9864ba42671"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("7440f78e-9d69-4083-89b9-3b728551083c"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
