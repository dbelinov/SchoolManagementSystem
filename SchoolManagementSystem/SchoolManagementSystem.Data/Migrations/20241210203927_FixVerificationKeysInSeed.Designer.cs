// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241210203927_FixVerificationKeysInSeed")]
    partial class FixVerificationKeysInSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4fe28f6-9778-4a94-bffc-dc6588ff646e"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("3f3edb75-d559-46ca-928f-9f3f87f5c13e"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("4be99e1c-24c4-4dca-a247-26317c7313ce"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e25ed50c-f621-482b-8087-4e8ffefdc8bc"),
                            RoleId = new Guid("b4fe28f6-9778-4a94-bffc-dc6588ff646e")
                        },
                        new
                        {
                            UserId = new Guid("d4577c75-77f6-498e-8bf3-5e40fe7c0bce"),
                            RoleId = new Guid("b4fe28f6-9778-4a94-bffc-dc6588ff646e")
                        },
                        new
                        {
                            UserId = new Guid("61344aa0-73cc-474e-b417-f0eb155d4e05"),
                            RoleId = new Guid("b4fe28f6-9778-4a94-bffc-dc6588ff646e")
                        },
                        new
                        {
                            UserId = new Guid("7457b466-60c2-4b9a-8422-b2b889bfea94"),
                            RoleId = new Guid("b4fe28f6-9778-4a94-bffc-dc6588ff646e")
                        },
                        new
                        {
                            UserId = new Guid("c76f8236-2060-4b87-898e-27d6b2da6d78"),
                            RoleId = new Guid("b4fe28f6-9778-4a94-bffc-dc6588ff646e")
                        },
                        new
                        {
                            UserId = new Guid("7ca00505-f103-48e4-9d61-fb3263ba977a"),
                            RoleId = new Guid("b4fe28f6-9778-4a94-bffc-dc6588ff646e")
                        },
                        new
                        {
                            UserId = new Guid("37a2e56c-5e73-426c-b64c-67f3e1276a02"),
                            RoleId = new Guid("3f3edb75-d559-46ca-928f-9f3f87f5c13e")
                        },
                        new
                        {
                            UserId = new Guid("4841dee8-5528-4641-a29a-6639d65d70d8"),
                            RoleId = new Guid("3f3edb75-d559-46ca-928f-9f3f87f5c13e")
                        },
                        new
                        {
                            UserId = new Guid("66f892b6-6a11-4df1-bc4b-ff0014c62fb8"),
                            RoleId = new Guid("3f3edb75-d559-46ca-928f-9f3f87f5c13e")
                        },
                        new
                        {
                            UserId = new Guid("3d357581-f0af-43cf-b07d-10e633e47ae9"),
                            RoleId = new Guid("3f3edb75-d559-46ca-928f-9f3f87f5c13e")
                        },
                        new
                        {
                            UserId = new Guid("743896c4-dde4-4d4a-ae08-201448a0538a"),
                            RoleId = new Guid("3f3edb75-d559-46ca-928f-9f3f87f5c13e")
                        },
                        new
                        {
                            UserId = new Guid("18fe4605-776f-4e3b-a6ea-7de059667c60"),
                            RoleId = new Guid("3f3edb75-d559-46ca-928f-9f3f87f5c13e")
                        },
                        new
                        {
                            UserId = new Guid("6d8fb148-72df-484b-998d-68ea58112359"),
                            RoleId = new Guid("4be99e1c-24c4-4dca-a247-26317c7313ce")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e25ed50c-f621-482b-8087-4e8ffefdc8bc"),
                            AccessFailedCount = 0,
                            AppId = new Guid("45a0fc66-8c37-4b97-bd66-eed20cca76a9"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 26, 927, DateTimeKind.Local).AddTicks(6740),
                            ConcurrencyStamp = "88b49e6b-b266-477b-81b7-a2ea82d5b70c",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMX1z+p2FXngi6WiWlkOHSplB1gvAQqsqxsSunNnW62pzZCsIt+c+2xawa9ruLeFsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48b08606-64cf-4200-9ebb-475d8ea0daf1",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("b6662178-53af-4450-8e6c-594d313bcae1")
                        },
                        new
                        {
                            Id = new Guid("d4577c75-77f6-498e-8bf3-5e40fe7c0bce"),
                            AccessFailedCount = 0,
                            AppId = new Guid("d753c019-419d-4fc9-bcd1-e81084d677c5"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 26, 964, DateTimeKind.Local).AddTicks(5830),
                            ConcurrencyStamp = "083befcb-3db4-46f2-af4a-1a1abf14a600",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDn9Mw0A9IPBKcqUSgf14fShqUqZhN5SfMhxNcgjipzRTJg6HEzd0KUXraPViHKFcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d33cfb3-82a8-4c54-a0bb-fda244fd57a9",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("f157ab19-869b-4031-b22d-b883edee4cd2")
                        },
                        new
                        {
                            Id = new Guid("61344aa0-73cc-474e-b417-f0eb155d4e05"),
                            AccessFailedCount = 0,
                            AppId = new Guid("22722b03-0902-40ac-8022-da0b3cd6d024"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 1, DateTimeKind.Local).AddTicks(6030),
                            ConcurrencyStamp = "4cf41f18-f73e-43e7-b5ca-6ef28588da08",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDYoiV+25L4cJrU6AXJyE36B0BHu+bgp9WTGRj0QfogMK9PlN1afCEobp2TZ511UBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad158b58-e2e2-4fad-a8de-497074ffd701",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("1834dbd2-af82-4cf7-a603-d29882311f37")
                        },
                        new
                        {
                            Id = new Guid("7457b466-60c2-4b9a-8422-b2b889bfea94"),
                            AccessFailedCount = 0,
                            AppId = new Guid("af460353-e289-4f19-8bd8-78db1354131d"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 39, DateTimeKind.Local).AddTicks(730),
                            ConcurrencyStamp = "499211b1-0c5f-4526-a461-350d566f1f2e",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKTCErAUqPw74JXrmFGklY/9SG5lmsmekZ3Yzq3oLS92J/Ulu6Q9wEpkXMm1PKMuCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ef0e5de-b862-496d-84b8-b332b5ac7135",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("c9b74718-3bda-413a-a9ab-2bb257856dac")
                        },
                        new
                        {
                            Id = new Guid("c76f8236-2060-4b87-898e-27d6b2da6d78"),
                            AccessFailedCount = 0,
                            AppId = new Guid("7803d9e9-216f-49bd-806b-6bffd7a85488"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 76, DateTimeKind.Local).AddTicks(7840),
                            ConcurrencyStamp = "d073bb9a-ad3c-4dbf-94ec-c6d671828f48",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKwUCOL6sJuutmoGkPSInKnH9MG0cNL5oHIw65zmSMnGTIH0QAtxkKPdtl7Rh4COxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ace4980-02c1-428e-87f5-ec84ba85eaa5",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("60d82043-eb9b-4664-bfc2-c130139f31b8")
                        },
                        new
                        {
                            Id = new Guid("7ca00505-f103-48e4-9d61-fb3263ba977a"),
                            AccessFailedCount = 0,
                            AppId = new Guid("5100ccc0-51c3-41a4-9982-302564d8fa62"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 114, DateTimeKind.Local).AddTicks(4620),
                            ConcurrencyStamp = "f2a282a0-ad36-4bb4-9a5e-db79f39c25e0",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB2VPi09tJJ6ZXMQDYVleZiTnBJ64WtNe/rJLRXTXkaODvkJGtTT6uSl0Fb6wnlgUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a4eacd6-4fb9-40fd-b2f5-10c0de0af5fa",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("91916cb7-92a1-4add-855c-b5c774da99a6")
                        },
                        new
                        {
                            Id = new Guid("37a2e56c-5e73-426c-b64c-67f3e1276a02"),
                            AccessFailedCount = 0,
                            AppId = new Guid("cf46d531-b1cd-48a3-8b5a-164b407c63de"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 152, DateTimeKind.Local).AddTicks(500),
                            ConcurrencyStamp = "99af372a-561b-413b-9494-be42337633f4",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENdTSuhn6+cwQF58OJOGrShKfTIfWouRh8J07pgGKuPloNW40V6JOzXvBaZ1Paccow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06f8b8fa-874d-469d-88b1-5ccfbc069ac6",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("c1afe46f-52a8-4f81-9d58-9f5f559899f9")
                        },
                        new
                        {
                            Id = new Guid("4841dee8-5528-4641-a29a-6639d65d70d8"),
                            AccessFailedCount = 0,
                            AppId = new Guid("6c4e91aa-5027-4227-b186-5b8ffc1380e6"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 189, DateTimeKind.Local).AddTicks(6610),
                            ConcurrencyStamp = "e8982a14-850a-4ce5-ac44-183717434d1e",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHaeruGyGkeZMZf7kxFkOgodsC3ir66lVpztm55RS76XZbOex/b4NiEWHmqjk9yAlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ad32f40-c1b3-47b2-b90f-230c15b24c4d",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("f56328bf-13ce-420e-a3e0-8265d184b03a")
                        },
                        new
                        {
                            Id = new Guid("66f892b6-6a11-4df1-bc4b-ff0014c62fb8"),
                            AccessFailedCount = 0,
                            AppId = new Guid("34ce67ff-c98d-4a43-9eb6-345905242e97"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 227, DateTimeKind.Local).AddTicks(2120),
                            ConcurrencyStamp = "3ffaca7c-2642-4853-b97f-82f9e5fd2e93",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECAh+eJO5/+Dsp5fyqynVIFBQreMAZ4DKN7JOa/kLSMncd4NzumE/WYN+gK4v1mtsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d8ed79b-bda2-4d9f-8b29-14640b5d3dfa",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("ed893222-9a7a-4ee9-817b-875e52e6cfaf")
                        },
                        new
                        {
                            Id = new Guid("3d357581-f0af-43cf-b07d-10e633e47ae9"),
                            AccessFailedCount = 0,
                            AppId = new Guid("3fd6b3d4-6bcf-4932-9e5a-4a607b3bfd0e"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 264, DateTimeKind.Local).AddTicks(2200),
                            ConcurrencyStamp = "2ca3da5f-3b03-4716-b6df-7cd2918dc237",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI2jSoQyM0j/yQiPRdatf4gjp3XvMKCZ1Xh+oOaqzl/fCzhGW/RqgbMrDkni2qfkiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96daf992-b632-422d-a2cd-54315c0106cc",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("7018ad18-f5d9-4f3e-a651-61a737b3871b")
                        },
                        new
                        {
                            Id = new Guid("743896c4-dde4-4d4a-ae08-201448a0538a"),
                            AccessFailedCount = 0,
                            AppId = new Guid("b4dd7b6a-53b8-4110-97b2-ee4af5bd9274"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 300, DateTimeKind.Local).AddTicks(2250),
                            ConcurrencyStamp = "63b40961-95ff-4ff5-9f82-621fbcfdc171",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOIKOSH+ZWbkQSdXAs0Xonk//EgtXoV+XvYBAzD97AHZ9wd3rLREEFv7nLi3CqVYcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fab9b73-751c-4064-827a-1606bb4168e0",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("2034c4b3-970a-4e84-b081-12f385d6d360")
                        },
                        new
                        {
                            Id = new Guid("18fe4605-776f-4e3b-a6ea-7de059667c60"),
                            AccessFailedCount = 0,
                            AppId = new Guid("b7c9bcae-011b-4df9-851f-955a975f2dfe"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 337, DateTimeKind.Local).AddTicks(1080),
                            ConcurrencyStamp = "0a5baec9-cacb-4876-b104-97ce10e33bbc",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGtMnXblTFhvEOTcHuZDKW0TgFoJKiDP5CyFXeIZ4h5kqUMHH74fbaU693wCRXLkCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5988b19b-e2fd-4ae5-8094-5a3f89cd21a6",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("97d2c953-f60a-450b-a54d-633a5c1da52a")
                        },
                        new
                        {
                            Id = new Guid("6d8fb148-72df-484b-998d-68ea58112359"),
                            AccessFailedCount = 0,
                            AppId = new Guid("6d8fb148-72df-484b-998d-68ea58112359"),
                            BirthDate = new DateTime(2024, 12, 10, 22, 39, 27, 373, DateTimeKind.Local).AddTicks(9220),
                            ConcurrencyStamp = "78404a79-b181-4826-bebc-8889a33805e3",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL3NNgRdDMA5jBL+Or0/Sp8MF3DTT6D49x3rvDULxanZPbrU43TgNMCYf5C/YCmA/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de4c229d-78c3-4866-90c7-d7fe3494e38c",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("6d8fb148-72df-484b-998d-68ea58112359")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\"",
                            Specialities = "[1,2,4]"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\"",
                            Specialities = "[5,6,7]"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sveti Kliment Ohridski 8, Sofia, Bulgaria",
                            Description = "The Technical University of Sofia is Bulgaria's largest and foremost academic establishment for higher engineering education.",
                            LogoUrl = "https://scontent.fsof1-1.fna.fbcdn.net/v/t39.30808-6/453179855_1108969364009343_5412650960044976974_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=qPhfwrpLKZUQ7kNvgGHjtnI&_nc_zt=23&_nc_ht=scontent.fsof1-1.fna&_nc_gid=A1xPbdI_kb_P2-V2ZeYF9Ij&oh=00_AYCD4-wxXkM0nUjRh1A3Z58xa9vtxRdQAf4fh6OnOsLa_g&oe=675A5DED",
                            Name = "Technical University of Sofia",
                            Specialities = "[2,1]"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45a0fc66-8c37-4b97-bd66-eed20cca76a9"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("b6662178-53af-4450-8e6c-594d313bcae1")
                        },
                        new
                        {
                            Id = new Guid("d753c019-419d-4fc9-bcd1-e81084d677c5"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("f157ab19-869b-4031-b22d-b883edee4cd2")
                        },
                        new
                        {
                            Id = new Guid("22722b03-0902-40ac-8022-da0b3cd6d024"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("1834dbd2-af82-4cf7-a603-d29882311f37")
                        },
                        new
                        {
                            Id = new Guid("af460353-e289-4f19-8bd8-78db1354131d"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("c9b74718-3bda-413a-a9ab-2bb257856dac")
                        },
                        new
                        {
                            Id = new Guid("7803d9e9-216f-49bd-806b-6bffd7a85488"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("60d82043-eb9b-4664-bfc2-c130139f31b8")
                        },
                        new
                        {
                            Id = new Guid("5100ccc0-51c3-41a4-9982-302564d8fa62"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("91916cb7-92a1-4add-855c-b5c774da99a6")
                        },
                        new
                        {
                            Id = new Guid("787d1a06-dbaf-4b5a-a8eb-773736c18d97"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("7027c313-0dab-4ca8-b95f-aa795a1c8081")
                        },
                        new
                        {
                            Id = new Guid("39dad089-66b2-46c2-8369-9aa2226182d2"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("ea417ed3-1785-4ce7-ac09-dafd1e6f844e")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf46d531-b1cd-48a3-8b5a-164b407c63de"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("c1afe46f-52a8-4f81-9d58-9f5f559899f9")
                        },
                        new
                        {
                            Id = new Guid("6c4e91aa-5027-4227-b186-5b8ffc1380e6"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("f56328bf-13ce-420e-a3e0-8265d184b03a")
                        },
                        new
                        {
                            Id = new Guid("34ce67ff-c98d-4a43-9eb6-345905242e97"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("ed893222-9a7a-4ee9-817b-875e52e6cfaf")
                        },
                        new
                        {
                            Id = new Guid("3fd6b3d4-6bcf-4932-9e5a-4a607b3bfd0e"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("7018ad18-f5d9-4f3e-a651-61a737b3871b")
                        },
                        new
                        {
                            Id = new Guid("b4dd7b6a-53b8-4110-97b2-ee4af5bd9274"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("2034c4b3-970a-4e84-b081-12f385d6d360")
                        },
                        new
                        {
                            Id = new Guid("b7c9bcae-011b-4df9-851f-955a975f2dfe"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("97d2c953-f60a-450b-a54d-633a5c1da52a")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("cf46d531-b1cd-48a3-8b5a-164b407c63de"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("cf46d531-b1cd-48a3-8b5a-164b407c63de"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("6c4e91aa-5027-4227-b186-5b8ffc1380e6"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("6c4e91aa-5027-4227-b186-5b8ffc1380e6"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("3fd6b3d4-6bcf-4932-9e5a-4a607b3bfd0e"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("34ce67ff-c98d-4a43-9eb6-345905242e97"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("34ce67ff-c98d-4a43-9eb6-345905242e97"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("34ce67ff-c98d-4a43-9eb6-345905242e97"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("b4dd7b6a-53b8-4110-97b2-ee4af5bd9274"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("b7c9bcae-011b-4df9-851f-955a975f2dfe"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
