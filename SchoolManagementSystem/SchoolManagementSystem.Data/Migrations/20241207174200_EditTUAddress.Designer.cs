// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagementSystem.Data;

#nullable disable

namespace SchoolManagementSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241207174200_EditTUAddress")]
    partial class EditTUAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("61a4d412-d278-4791-b18d-e45f551366dc"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("a68416ad-e044-4088-a03d-c2cf431a2e86"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = new Guid("01877c5c-958f-4588-9796-c5afbccd8543"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f304fb99-f3f3-44bf-ad0e-27305ed91e5e"),
                            RoleId = new Guid("61a4d412-d278-4791-b18d-e45f551366dc")
                        },
                        new
                        {
                            UserId = new Guid("5cad4018-0fe3-4d3d-9712-9072c8ade2b7"),
                            RoleId = new Guid("61a4d412-d278-4791-b18d-e45f551366dc")
                        },
                        new
                        {
                            UserId = new Guid("89da9466-173b-416c-a2f1-f1d77ce02c09"),
                            RoleId = new Guid("61a4d412-d278-4791-b18d-e45f551366dc")
                        },
                        new
                        {
                            UserId = new Guid("bb2caabd-0fa8-4fcf-920b-d83aefbab958"),
                            RoleId = new Guid("61a4d412-d278-4791-b18d-e45f551366dc")
                        },
                        new
                        {
                            UserId = new Guid("8d772f07-5e71-4de2-982c-fc58f2316840"),
                            RoleId = new Guid("61a4d412-d278-4791-b18d-e45f551366dc")
                        },
                        new
                        {
                            UserId = new Guid("7ae0afea-5799-46d3-8f25-14a80933d224"),
                            RoleId = new Guid("61a4d412-d278-4791-b18d-e45f551366dc")
                        },
                        new
                        {
                            UserId = new Guid("4d50b8fa-fb33-4f08-8b48-1d961f446d83"),
                            RoleId = new Guid("a68416ad-e044-4088-a03d-c2cf431a2e86")
                        },
                        new
                        {
                            UserId = new Guid("6e469e61-f39b-4a1d-9952-84aa7edeedce"),
                            RoleId = new Guid("a68416ad-e044-4088-a03d-c2cf431a2e86")
                        },
                        new
                        {
                            UserId = new Guid("c6ffa9cb-4c02-4fde-90e2-80bb539c597a"),
                            RoleId = new Guid("a68416ad-e044-4088-a03d-c2cf431a2e86")
                        },
                        new
                        {
                            UserId = new Guid("9eb1c4b5-95c8-4112-9f61-732fd34b43aa"),
                            RoleId = new Guid("a68416ad-e044-4088-a03d-c2cf431a2e86")
                        },
                        new
                        {
                            UserId = new Guid("6726d3b5-e980-4203-9eb9-edc9c4252e7d"),
                            RoleId = new Guid("a68416ad-e044-4088-a03d-c2cf431a2e86")
                        },
                        new
                        {
                            UserId = new Guid("fcc7587f-8d7c-44f6-ace6-4f9ccb23d363"),
                            RoleId = new Guid("a68416ad-e044-4088-a03d-c2cf431a2e86")
                        },
                        new
                        {
                            UserId = new Guid("42b1fe04-7ce6-4256-83e8-f08dbacb3a4a"),
                            RoleId = new Guid("01877c5c-958f-4588-9796-c5afbccd8543")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<int?>("TimetableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "9b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "10b",
                            SchoolId = 1,
                            Speciality = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "8g",
                            SchoolId = 1,
                            Speciality = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "10a",
                            SchoolId = 2,
                            Speciality = 5
                        },
                        new
                        {
                            Id = 5,
                            Name = "11v",
                            SchoolId = 2,
                            Speciality = 6
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsAuthenticated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f304fb99-f3f3-44bf-ad0e-27305ed91e5e"),
                            AccessFailedCount = 0,
                            AppId = new Guid("6d826163-288d-4b57-89b9-396587228288"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 384, DateTimeKind.Local).AddTicks(20),
                            ConcurrencyStamp = "d89965cb-ee3e-4045-916a-63850660b88b",
                            Email = "ivan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENFvgrE+4O+k6xi8L+WIoxiUC/qIn/0+W36psfCiTWS5f7l8Dtx8iIxEuXDcnRSSxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e531909c-4398-438d-80dd-1d5aca2e9c7f",
                            TwoFactorEnabled = false,
                            UserName = "ivan@gmail.com",
                            VerificationKey = new Guid("b020e5e2-2653-4b38-a9c6-3efd62072f1f")
                        },
                        new
                        {
                            Id = new Guid("5cad4018-0fe3-4d3d-9712-9072c8ade2b7"),
                            AccessFailedCount = 0,
                            AppId = new Guid("1c68d182-bdd6-4f77-b014-123f2c3c6dba"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 419, DateTimeKind.Local).AddTicks(5170),
                            ConcurrencyStamp = "2748204e-4721-450e-8b1d-74b22521e483",
                            Email = "gencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Ginev",
                            LockoutEnabled = false,
                            MiddleName = "Petkov",
                            NormalizedEmail = "GENCHO@GMAIL.COM",
                            NormalizedUserName = "GENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMG6puMIXFXruXhfON15EkdUUMU6+2v/xRQqoKx+bnjs6PRq/IhoaNUT7P3ozJA9tA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ffc70855-666c-4744-a981-70d8373ebf3a",
                            TwoFactorEnabled = false,
                            UserName = "gencho@gmail.com",
                            VerificationKey = new Guid("6a739ecb-088b-434e-8322-a2a64b41152a")
                        },
                        new
                        {
                            Id = new Guid("89da9466-173b-416c-a2f1-f1d77ce02c09"),
                            AccessFailedCount = 0,
                            AppId = new Guid("7ed094cc-7b9c-4066-b7b4-326c9d36fa43"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 455, DateTimeKind.Local).AddTicks(1110),
                            ConcurrencyStamp = "61157fd4-f3f6-458b-896c-3285a950f5c5",
                            Email = "martin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            MiddleName = "Ivanov",
                            NormalizedEmail = "MARTIN@GMAIL.COM",
                            NormalizedUserName = "MARTIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDxxdbqmCLGMVi8La96++Bnyj+ltU85otLW7D2gcuWZKrkObSzw4SmfVTMtSNHTfmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c38f2897-0e1b-498b-90c5-f198af9836c2",
                            TwoFactorEnabled = false,
                            UserName = "martin@gmail.com",
                            VerificationKey = new Guid("84aef1e9-5bc0-46cd-a960-80acdc7527d4")
                        },
                        new
                        {
                            Id = new Guid("bb2caabd-0fa8-4fcf-920b-d83aefbab958"),
                            AccessFailedCount = 0,
                            AppId = new Guid("339f87ba-c15d-40cc-929b-596d437b4f7f"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 491, DateTimeKind.Local).AddTicks(4490),
                            ConcurrencyStamp = "6ae75491-074d-415a-9214-fa067cb31a82",
                            Email = "ginka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            MiddleName = "Petrova",
                            NormalizedEmail = "GINKA@GMAIL.COM",
                            NormalizedUserName = "GINKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED8j9Vi48Zs7AOYoKd5OA2ITAMLlNycXXmoWdjRsvBtajCoHMxWCOjwsIA0EqcgyCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90de05e0-9fea-40a5-af9f-bf9beb277b9a",
                            TwoFactorEnabled = false,
                            UserName = "ginka@gmail.com",
                            VerificationKey = new Guid("31d7b2c3-4136-4f6a-97eb-709e65422d84")
                        },
                        new
                        {
                            Id = new Guid("8d772f07-5e71-4de2-982c-fc58f2316840"),
                            AccessFailedCount = 0,
                            AppId = new Guid("a08ef20c-fa01-4ddc-b66c-e2c0f27ca0a7"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 527, DateTimeKind.Local).AddTicks(7680),
                            ConcurrencyStamp = "aa268271-dc24-4644-a4ff-65acaedcb32b",
                            Email = "jivko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Donev",
                            LockoutEnabled = false,
                            MiddleName = "Vasilev",
                            NormalizedEmail = "JIVKO@GMAIL.COM",
                            NormalizedUserName = "JIVKO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJYsDsFwmwfk9KVUXFyMgqiRrn5yqQHm+OCE4Hx9MFq1mFcr/Hx9/A5AJ8ePsB+R/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a45c975-8b00-455f-ad1b-0f4c3002fa37",
                            TwoFactorEnabled = false,
                            UserName = "jivko@gmail.com",
                            VerificationKey = new Guid("e82b9aa4-6c41-4e4e-8273-cf50129d571d")
                        },
                        new
                        {
                            Id = new Guid("7ae0afea-5799-46d3-8f25-14a80933d224"),
                            AccessFailedCount = 0,
                            AppId = new Guid("4aa6b93b-2733-43ba-9bf7-9ed44699a0b6"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 564, DateTimeKind.Local).AddTicks(3610),
                            ConcurrencyStamp = "aed26156-40d2-4b02-9092-14f402fcf558",
                            Email = "pencho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Mihov",
                            LockoutEnabled = false,
                            MiddleName = "Angelov",
                            NormalizedEmail = "PENCHO@GMAIL.COM",
                            NormalizedUserName = "PENCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAgORN4l0WcT2X3+YhTrrVVHiceu/poYmvBZJ16JZT6r85fo6X9AKlZOeGXElXGCVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c9d79bc-e418-4b0a-b907-99f878ba6b63",
                            TwoFactorEnabled = false,
                            UserName = "pencho@gmail.com",
                            VerificationKey = new Guid("3150f857-5ddb-45c5-b0db-0855d5a3b5ec")
                        },
                        new
                        {
                            Id = new Guid("4d50b8fa-fb33-4f08-8b48-1d961f446d83"),
                            AccessFailedCount = 0,
                            AppId = new Guid("e6132c62-1faf-48c3-b637-54bb5efe5cce"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 600, DateTimeKind.Local).AddTicks(7890),
                            ConcurrencyStamp = "0cf57149-3630-43ca-9212-9ecf7787e40c",
                            Email = "maria@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            MiddleName = "Ivanova",
                            NormalizedEmail = "MARIA@GMAIL.COM",
                            NormalizedUserName = "MARIA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECKV385B0QrYQp/87QnV5o6W3mmLxQokJyIkVeahjyF47leTkrPFvb5xaYoNlVYuZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cfd57e2-7c21-46b3-acad-bf3ae9288baa",
                            TwoFactorEnabled = false,
                            UserName = "maria@gmail.com",
                            VerificationKey = new Guid("1176dcb2-856f-4c1e-b302-2db04f27f261")
                        },
                        new
                        {
                            Id = new Guid("6e469e61-f39b-4a1d-9952-84aa7edeedce"),
                            AccessFailedCount = 0,
                            AppId = new Guid("c8815eee-bcba-413b-b495-915281f30c43"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 637, DateTimeKind.Local).AddTicks(2070),
                            ConcurrencyStamp = "3d650728-30a3-495e-b10f-c12063212b25",
                            Email = "stefka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Gineva",
                            LockoutEnabled = false,
                            MiddleName = "Petkova",
                            NormalizedEmail = "STEFKA@GMAIL.COM",
                            NormalizedUserName = "STEFKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC0MLW/UQopjTVxz9zZ54dV409RbZsorjbIhXrA7LdOVDBc0v3f5gHnkHZkgsjNi/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbdda5fd-e8e1-4531-ae15-dd32199571a0",
                            TwoFactorEnabled = false,
                            UserName = "stefka@gmail.com",
                            VerificationKey = new Guid("7a7dff15-8666-46d5-b055-06eea06f4b4f")
                        },
                        new
                        {
                            Id = new Guid("c6ffa9cb-4c02-4fde-90e2-80bb539c597a"),
                            AccessFailedCount = 0,
                            AppId = new Guid("4a852dba-f9da-4582-86c9-434cbbecdfdd"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 673, DateTimeKind.Local).AddTicks(1720),
                            ConcurrencyStamp = "a57453b2-bb01-4651-8fb0-801d81ff7250",
                            Email = "stamen@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peev",
                            LockoutEnabled = false,
                            MiddleName = "Georgiev",
                            NormalizedEmail = "STAMEN@GMAIL.COM",
                            NormalizedUserName = "STAMEN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENio7G5eord9VB6GzYW9dYZYPLC52wiHeG640UhGR5P12fBSUUoEyw3y2nc9JI5Gqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "abc65c5b-c759-470b-98c7-47765165eeda",
                            TwoFactorEnabled = false,
                            UserName = "stamen@gmail.com",
                            VerificationKey = new Guid("d3993dd9-6f63-48d3-bf77-589e67635340")
                        },
                        new
                        {
                            Id = new Guid("9eb1c4b5-95c8-4112-9f61-732fd34b43aa"),
                            AccessFailedCount = 0,
                            AppId = new Guid("aa0ab228-f39a-4292-9f38-d4f5374ebf57"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 709, DateTimeKind.Local).AddTicks(730),
                            ConcurrencyStamp = "c11a61cc-c986-4000-8b9c-9440b9962180",
                            Email = "stoyanka@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Peneva",
                            LockoutEnabled = false,
                            MiddleName = "Doneva",
                            NormalizedEmail = "STOYANKA@GMAIL.COM",
                            NormalizedUserName = "STOYANKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCjX147AHCDURJQgvNSZg9VNXiCFbgc2npAW6XXHcYY6vAMe6dV5R8B33HtKhRR9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a45efe0f-a46d-4641-be66-fae84e691043",
                            TwoFactorEnabled = false,
                            UserName = "stoyanka@gmail.com",
                            VerificationKey = new Guid("6ea7d4be-e413-4413-96cc-1a2de79f10fe")
                        },
                        new
                        {
                            Id = new Guid("6726d3b5-e980-4203-9eb9-edc9c4252e7d"),
                            AccessFailedCount = 0,
                            AppId = new Guid("53e5d108-80ce-4787-9918-05fa35e97718"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 744, DateTimeKind.Local).AddTicks(6600),
                            ConcurrencyStamp = "a383de59-26a5-4d99-a9af-9b1435a89589",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Chonev",
                            LockoutEnabled = false,
                            MiddleName = "Mladenov",
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECukGIgtBOoZghk4tW/rAWoFDQMmX18FaQMopFlp5y6GQ7f1Rqk/FRqmX6kZ05a3mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd8302d0-064a-47ef-a1d2-48d8bddc4cd4",
                            TwoFactorEnabled = false,
                            UserName = "petar@gmail.com",
                            VerificationKey = new Guid("141b3343-0f41-48ef-9199-eb7f0d03ad61")
                        },
                        new
                        {
                            Id = new Guid("fcc7587f-8d7c-44f6-ace6-4f9ccb23d363"),
                            AccessFailedCount = 0,
                            AppId = new Guid("7385dadb-87ab-4b8f-8a21-cf05d8c03824"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 780, DateTimeKind.Local).AddTicks(7510),
                            ConcurrencyStamp = "2e945653-72dc-4f44-82a3-31b82a6f65df",
                            Email = "boncho@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "BONCHO@GMAIL.COM",
                            NormalizedUserName = "BONCHO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBua4mtTI9v2QRJ9azTEFEJRAhrqSPftkqarqZdRDZeFZ+ZFCpYNb0K7DqK8Lce0Fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd02b0d2-801c-4775-b7c3-3cb74359b510",
                            TwoFactorEnabled = false,
                            UserName = "boncho@gmail.com",
                            VerificationKey = new Guid("0611b0e9-c60e-4216-a652-e9bce97ab26c")
                        },
                        new
                        {
                            Id = new Guid("42b1fe04-7ce6-4256-83e8-f08dbacb3a4a"),
                            AccessFailedCount = 0,
                            AppId = new Guid("42b1fe04-7ce6-4256-83e8-f08dbacb3a4a"),
                            BirthDate = new DateTime(2024, 12, 7, 19, 41, 59, 816, DateTimeKind.Local).AddTicks(3360),
                            ConcurrencyStamp = "3a726662-aab1-4661-8038-aaef0680dfe8",
                            Email = "admin@scholario.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IdNumber = "2452064114",
                            IsAuthenticated = true,
                            IsGuest = false,
                            LastName = "Adminov",
                            LockoutEnabled = false,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@SCHOLARIO.COM",
                            NormalizedUserName = "ADMIN@SCHOLARIO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDkziiiIVZpFqWekCWPCgooJ090SbNM4Phw9QDQ7GyaxwHKxNDmjjKnpPFNfAwbr7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bfbc3ed-1573-4d0a-b20a-8e22e7fce327",
                            TwoFactorEnabled = false,
                            UserName = "admin@scholario.com",
                            VerificationKey = new Guid("42b1fe04-7ce6-4256-83e8-f08dbacb3a4a")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Avgusta Trayana 44, Stara Zagora, Bulgaria",
                            Description = "The School of Informatics and Mathematics in Stara Zagora",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t39.30808-6/327026697_887516432673344_8690934784557383737_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=Rr0iH229ZRwQ7kNvgFeKEcF&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AizPmB3yiG6QTT84Mh5cpaJ&oh=00_AYDekshXGVy2Xa02RxZHINhma0rvygf0uH2D2_cO5om7Dg&oe=675539CD",
                            Name = "PPMG \"Geo Milev\"",
                            Specialities = "[1,2,4]"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Tsar Ivan Shishman 62, Stara Zagora, Bulgaria",
                            Description = "Stara Zagora's School for Languages like German, French and English",
                            LogoUrl = "https://scontent.fsof1-2.fna.fbcdn.net/v/t1.6435-9/119450239_3343706645698457_6833144760730823616_n.jpg?_nc_cat=109&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=ydzqvT5knjIQ7kNvgHdpGNw&_nc_zt=23&_nc_ht=scontent.fsof1-2.fna&_nc_gid=AFu1voqShMlHBNalgqkJBc1&oh=00_AYCyzp4BZ7gcXj6ZSnpr1Oop6AQoeJAI-BKPdIUJsGXD5Q&oe=677BAAFA",
                            Name = "SSFL \"Romain Rolland\"",
                            Specialities = "[5,6,7]"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sveti Kliment Ohridski 8, Sofia, Bulgaria",
                            Description = "The Technical University of Sofia is Bulgaria's largest and foremost academic establishment for higher engineering education.",
                            LogoUrl = "https://scontent.fsof1-1.fna.fbcdn.net/v/t39.30808-6/453179855_1108969364009343_5412650960044976974_n.jpg?_nc_cat=101&ccb=1-7&_nc_sid=6ee11a&_nc_ohc=qPhfwrpLKZUQ7kNvgGHjtnI&_nc_zt=23&_nc_ht=scontent.fsof1-1.fna&_nc_gid=A1xPbdI_kb_P2-V2ZeYF9Ij&oh=00_AYCD4-wxXkM0nUjRh1A3Z58xa9vtxRdQAf4fh6OnOsLa_g&oe=675A5DED",
                            Name = "Technical University of Sofia",
                            Specialities = "[2,1]"
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("SchoolId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SchoolsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d826163-288d-4b57-89b9-396587228288"),
                            ClassId = 1,
                            FirstName = "Ivan",
                            IdNumber = "0141012442",
                            LastName = "Ivanov",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("e68e8071-def2-4659-8a2b-54b79210c9f1")
                        },
                        new
                        {
                            Id = new Guid("1c68d182-bdd6-4f77-b014-123f2c3c6dba"),
                            ClassId = 1,
                            FirstName = "Gencho",
                            IdNumber = "0543121244",
                            LastName = "Ginev",
                            MiddleName = "Petkov",
                            VerificationKey = new Guid("54f2404f-5250-4f69-a781-680301583d6d")
                        },
                        new
                        {
                            Id = new Guid("7ed094cc-7b9c-4066-b7b4-326c9d36fa43"),
                            ClassId = 2,
                            FirstName = "Martin",
                            IdNumber = "0741124324",
                            LastName = "Georgiev",
                            MiddleName = "Ivanov",
                            VerificationKey = new Guid("c276be95-401c-4b46-8021-b39f77591713")
                        },
                        new
                        {
                            Id = new Guid("339f87ba-c15d-40cc-929b-596d437b4f7f"),
                            ClassId = 3,
                            FirstName = "Ginka",
                            IdNumber = "0944174331",
                            LastName = "Stoyanova",
                            MiddleName = "Petrova",
                            VerificationKey = new Guid("bf9fe6d6-60b7-4995-a9d2-141e3384d539")
                        },
                        new
                        {
                            Id = new Guid("a08ef20c-fa01-4ddc-b66c-e2c0f27ca0a7"),
                            ClassId = 4,
                            FirstName = "Jivko",
                            IdNumber = "1041124324",
                            LastName = "Donev",
                            MiddleName = "Vasilev",
                            VerificationKey = new Guid("37c23ecc-f2f2-48ce-bd37-3c80ac007712")
                        },
                        new
                        {
                            Id = new Guid("4aa6b93b-2733-43ba-9bf7-9ed44699a0b6"),
                            ClassId = 5,
                            FirstName = "Pencho",
                            IdNumber = "0945161226",
                            LastName = "Mihov",
                            MiddleName = "Angelov",
                            VerificationKey = new Guid("39f6e5d2-762d-4b1b-8792-8dab01da6d2d")
                        },
                        new
                        {
                            Id = new Guid("5a950535-fb80-4f84-a18b-c41137ffb459"),
                            ClassId = 4,
                            FirstName = "Diana",
                            IdNumber = "1148061932",
                            LastName = "Kostova",
                            MiddleName = "Nedeva",
                            VerificationKey = new Guid("c3fb7a8d-968b-4697-81eb-0d8da10947ae")
                        },
                        new
                        {
                            Id = new Guid("d4e61fb0-9264-4528-81ff-757b8d1473f5"),
                            ClassId = 5,
                            FirstName = "Ruzha",
                            IdNumber = "0852131993",
                            LastName = "Veleva",
                            MiddleName = "Todorova",
                            VerificationKey = new Guid("13e3fce3-c6f2-4f5e-8565-2a9a69a26b0c")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("Subject")
                        .HasColumnType("int");

                    b.Property<Guid>("VerificationKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6132c62-1faf-48c3-b637-54bb5efe5cce"),
                            FirstName = "Maria",
                            IdNumber = "8008089119",
                            LastName = "Petrova",
                            MiddleName = "Ivanova",
                            Subject = 1,
                            VerificationKey = new Guid("cbc2b206-561c-40eb-b2c7-295d2beea296")
                        },
                        new
                        {
                            Id = new Guid("c8815eee-bcba-413b-b495-915281f30c43"),
                            FirstName = "Stefka",
                            IdNumber = "9003021331",
                            LastName = "Gineva",
                            MiddleName = "Petkova",
                            Subject = 4,
                            VerificationKey = new Guid("accec307-983c-488d-8a5d-2c66dbb356d8")
                        },
                        new
                        {
                            Id = new Guid("4a852dba-f9da-4582-86c9-434cbbecdfdd"),
                            FirstName = "Stamen",
                            IdNumber = "7211053143",
                            LastName = "Peev",
                            MiddleName = "Georgiev",
                            Subject = 14,
                            VerificationKey = new Guid("d22878fb-eb2f-45b2-b46e-5f8ec5dec97e")
                        },
                        new
                        {
                            Id = new Guid("aa0ab228-f39a-4292-9f38-d4f5374ebf57"),
                            FirstName = "Stoyanka",
                            IdNumber = "7105053113",
                            LastName = "Peneva",
                            MiddleName = "Doneva",
                            Subject = 15,
                            VerificationKey = new Guid("f31e6ee2-4ea7-4a15-97b2-e50bcd612964")
                        },
                        new
                        {
                            Id = new Guid("53e5d108-80ce-4787-9918-05fa35e97718"),
                            FirstName = "Petar",
                            IdNumber = "8210045421",
                            LastName = "Chonev",
                            MiddleName = "Mladenov",
                            Subject = 5,
                            VerificationKey = new Guid("ff528a4a-0538-4fa0-b3ac-3c73f2e6f96c")
                        },
                        new
                        {
                            Id = new Guid("7385dadb-87ab-4b8f-8a21-cf05d8c03824"),
                            FirstName = "Boncho",
                            IdNumber = "8006210887",
                            LastName = "Dimitrov",
                            MiddleName = "Dimitrov",
                            Subject = 9,
                            VerificationKey = new Guid("87bf4c23-062c-4c2a-8ad1-48f765c4e761")
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("TeachersClasses");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("e6132c62-1faf-48c3-b637-54bb5efe5cce"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("e6132c62-1faf-48c3-b637-54bb5efe5cce"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("c8815eee-bcba-413b-b495-915281f30c43"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("c8815eee-bcba-413b-b495-915281f30c43"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("aa0ab228-f39a-4292-9f38-d4f5374ebf57"),
                            ClassId = 5
                        },
                        new
                        {
                            TeacherId = new Guid("4a852dba-f9da-4582-86c9-434cbbecdfdd"),
                            ClassId = 1
                        },
                        new
                        {
                            TeacherId = new Guid("4a852dba-f9da-4582-86c9-434cbbecdfdd"),
                            ClassId = 2
                        },
                        new
                        {
                            TeacherId = new Guid("4a852dba-f9da-4582-86c9-434cbbecdfdd"),
                            ClassId = 3
                        },
                        new
                        {
                            TeacherId = new Guid("53e5d108-80ce-4787-9918-05fa35e97718"),
                            ClassId = 4
                        },
                        new
                        {
                            TeacherId = new Guid("7385dadb-87ab-4b8f-8a21-cf05d8c03824"),
                            ClassId = 4
                        });
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId");

                    b.Navigation("School");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Grade", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", null)
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.SchoolProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.School", "School")
                        .WithMany("SchoolsProjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.StudentProject", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Project", "Project")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Student", "Student")
                        .WithMany("StudentsProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.School", null)
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.TeacherClass", b =>
                {
                    b.HasOne("SchoolManagementSystem.Data.Models.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagementSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Project", b =>
                {
                    b.Navigation("SchoolsProjects");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchoolsProjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentsProjects");
                });

            modelBuilder.Entity("SchoolManagementSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachersClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
