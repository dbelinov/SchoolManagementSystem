@model SchoolDetailsViewModel

@{
    ViewData["Title"] = "School Details";
}

<div class="container mt-4">
    <div class="row">
        <!-- Left Section: School Details -->
        <div class="col-md-6">
            @if (!string.IsNullOrEmpty(Model.LogoUrl))
            {
                <img src="@Model.LogoUrl" alt="School Logo" class="img-fluid mb-3" style="max-height: 150px;">
            }

            <h2>@Model.Name</h2>
            <p><strong>Address:</strong> @Model.Address</p>

            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <p><strong>Description:</strong> @Model.Description</p>
            }

            @* <!-- Display Specialities as a simple Bulleted List --> *@
            @* @if (Model.Specialities.Any()) *@
            @* { *@
            @*     <h4 class="mt-4">Specialities</h4> *@
            @*     <ul> *@
            @*         @foreach (var speciality in Model.Specialities) *@
            @*         { *@
            @*             <li>@speciality</li> *@
            @*         } *@
            @*     </ul> *@
            @* } *@
            @* else *@
            @* { *@
            @*     <p class="mt-4 text-muted">No specialities available.</p> *@
            @* } *@
        </div>

        <!-- Right Section: Map Display -->
        <div class="col-md-6">
            <div id="map" style="height: 400px; border: 1px solid #ccc;"></div>
        </div>
    </div>
</div>

<!-- Leaflet.js and Map Script -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const address = "@Model.Address";
        const apiKey = "3bd33a87ad8a46faba52396c629e7b96"; // Replace with your actual API key

        const map = L.map('map').setView([0, 0], 2); // Default view before geocoding

        // Add tile layer (OpenStreetMap)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: 'Â© OpenStreetMap contributors'
        }).addTo(map);

        // Geocode the address using OpenCage API
        fetch(`https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(address)}&key=${apiKey}`)
            .then(response => response.json())
            .then(data => {
                if (data && data.results.length > 0) {
                    const result = data.results[0];
                    const lat = result.geometry.lat;
                    const lon = result.geometry.lng;

                    map.setView([lat, lon], 16);
                    L.marker([lat, lon]).addTo(map)
                        .bindPopup(`<strong>@Model.Name</strong><br/>${result.formatted}`)
                        .openPopup();
                } else {
                    alert("Address not found on the map.");
                }
            })
            .catch(error => {
                console.error('Error fetching geolocation:', error);
                alert("Error fetching geolocation. Please check the console for details.");
            });
    });
</script>